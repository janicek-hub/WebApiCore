openapi: 3.0.2
info:
  title: Routing API v8
  version: 8.77.0
  description: A location service providing customizable route calculations for a
    variety of vehicle types as well as pedestrian modes.
  termsOfService: http://developer.here.com/terms-conditions
  license:
    name: HERE Documentation License
    url: https://legal.here.com/en-gb/terms/documentation-license
  x-document-meta-data:
    copyright: "Â© 2023 HERE Europe B.V."
    document-id: d01289cc-7dad-4e09-9d61-4c1858f76642
    date-created: '2023-08-18T09:54:06+00:00'
security:
- Bearer: []
- ApiKey: []
servers:
- url: https://router.hereapi.com/v8
  description: Production server for the HERE Routing Service
tags:
- name: Routing
- name: API Information
  description: Additional API Information
paths:
  "/routes":
    parameters:
    - "$ref": "#/components/parameters/transportMode"
    - "$ref": "#/components/parameters/origin"
    - "$ref": "#/components/parameters/destination"
    - "$ref": "#/components/parameters/via"
    - "$ref": "#/components/parameters/departureTimeWithAny"
    - "$ref": "#/components/parameters/arrivalTime"
    - "$ref": "#/components/parameters/routingMode"
    - "$ref": "#/components/parameters/alternatives"
    - "$ref": "#/components/parameters/avoid"
    - "$ref": "#/components/parameters/allow"
    - "$ref": "#/components/parameters/exclude"
    - "$ref": "#/components/parameters/units"
    - "$ref": "#/components/parameters/lang"
    - "$ref": "#/components/parameters/return"
    - "$ref": "#/components/parameters/spans"
    - "$ref": "#/components/parameters/truck"
    - "$ref": "#/components/parameters/vehicle"
    - "$ref": "#/components/parameters/ev"
    - "$ref": "#/components/parameters/fuel"
    - "$ref": "#/components/parameters/driver"
    - "$ref": "#/components/parameters/pedestrianSpeed"
    - "$ref": "#/components/parameters/xRequestId"
    - "$ref": "#/components/parameters/scooter"
    - "$ref": "#/components/parameters/currency"
    - "$ref": "#/components/parameters/customizations"
    - "$ref": "#/components/parameters/taxi"
    - "$ref": "#/components/parameters/tolls"
    - "$ref": "#/components/parameters/maxSpeedOnSegment"
    - "$ref": "#/components/parameters/traffic"
    get:
      operationId: calculateRoutes
      summary: Calculate routes via GET
      tags:
      - Routing
      description: Calculates a route using a generic vehicle/pedestrian mode, e.g.
        car, truck, pedestrian, etc...
      responses:
        200:
          "$ref": "#/components/responses/RoutesResponseOk"
        400:
          "$ref": "#/components/responses/InvalidRoutesRequestResponse"
        401:
          "$ref": "#/components/responses/401ErrorResponseWithRequestID"
        403:
          "$ref": "#/components/responses/Routing403ErrorResponse"
        500:
          "$ref": "#/components/responses/InternalServerErrorRoutesResponse"
    post:
      operationId: calculateRoutesPost
      summary: Calculate routes via POST
      tags:
      - Routing
      description: |
        Calculates a route using a generic vehicle/pedestrian mode, e.g. car, truck, pedestrian, etc...

        At the moment, only select parameters are permitted in the POST payload. In particular, those parameters
        that due to request size may be limited in the query string. See the request body section below. These
        parameters can be provided either in the query string or in the POST body. However, if a parameter is
        provided in both, the request will fail. All other parameters can only be provided in the query string
        at the moment.

        Post body size limit is 10MiB.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CalculateRoutesPostParameters"
      responses:
        200:
          "$ref": "#/components/responses/RoutesResponseOk"
        400:
          "$ref": "#/components/responses/InvalidRoutesRequestResponse"
        401:
          "$ref": "#/components/responses/401ErrorResponseWithRequestID"
        403:
          "$ref": "#/components/responses/Routing403ErrorResponse"
        500:
          "$ref": "#/components/responses/InternalServerErrorRoutesResponse"
  "/routes/{routeHandle}":
    parameters:
    - "$ref": "#/components/parameters/routeHandle"
    - "$ref": "#/components/parameters/transportMode"
    - "$ref": "#/components/parameters/routeHandleOrigin"
    - "$ref": "#/components/parameters/departureTimeWithAny"
    - "$ref": "#/components/parameters/avoid"
    - "$ref": "#/components/parameters/allow"
    - "$ref": "#/components/parameters/exclude"
    - "$ref": "#/components/parameters/units"
    - "$ref": "#/components/parameters/lang"
    - "$ref": "#/components/parameters/return"
    - "$ref": "#/components/parameters/spans"
    - "$ref": "#/components/parameters/truck"
    - "$ref": "#/components/parameters/vehicle"
    - "$ref": "#/components/parameters/evConsumption"
    - "$ref": "#/components/parameters/fuel"
    - "$ref": "#/components/parameters/pedestrianSpeed"
    - "$ref": "#/components/parameters/xRequestId"
    - "$ref": "#/components/parameters/scooter"
    - "$ref": "#/components/parameters/currency"
    - "$ref": "#/components/parameters/rerouting"
    - "$ref": "#/components/parameters/taxi"
    - "$ref": "#/components/parameters/tolls"
    - "$ref": "#/components/parameters/maxSpeedOnSegment"
    - "$ref": "#/components/parameters/traffic"
    get:
      operationId: getRoutesByHandle
      summary: Get route by handle via GET
      tags:
      - Routing
      description: |
        Decodes and returns a route from a previously calculated route handle.

        **Disclaimer: A route handle is not suitable for persistent route storage! It can be
        invalidated at any time.**

        A route handle encodes a previously calculated route. A route can be decoded from a handle
        as long as the service uses the same map data and encoding that were used when retrieving the handle.

        Thus it is suitable for caching routes compactly. It can be used to retrieve updated traffic
        information or other data along the route. However, a user should be prepared to recalculate
        the route when decoding the handle fails.

        All parameters of the `/routes` endpoint are supported, except for `destination`, `via`,
        `alternatives` and `routingMode`. See also the `return` parameter of `/routes` endpoint.

        The `origin` parameter can be provided to update the start of the previously calculated
        route.

        The `transportMode` parameter does not have to match the transport mode previously used for
        route calculation. However, when using a different transport mode, the request may fail,
        e.g. when the route has road segments forbidden for the provided transport mode.

        Please refer to the Developer Guide for more information and examples.
      responses:
        200:
          "$ref": "#/components/responses/RoutesResponseOk"
        400:
          "$ref": "#/components/responses/InvalidRoutesRequestResponse"
        401:
          "$ref": "#/components/responses/401ErrorResponseWithRequestID"
        403:
          "$ref": "#/components/responses/Routing403ErrorResponse"
        500:
          "$ref": "#/components/responses/InternalServerErrorRoutesResponse"
    post:
      operationId: getRoutesByHandlePost
      summary: Get route by handle via POST
      tags:
      - Routing
      description: |
        Decodes and returns a route from a previously calculated route handle.

        **Disclaimer: A route handle is not suitable for persistent route storage! It can be
        invalidated at any time.**

        A route handle encodes a previously calculated route. A route can be decoded from a handle
        as long as the service uses the same map data and encoding that were used when retrieving the handle.

        Thus it is suitable for caching routes compactly. It can be used to retrieve updated traffic
        information or other data along the route. However, a user should be prepared to recalculate
        the route when decoding the handle fails.

        All parameters of the `/routes` endpoint are supported, except for `destination`, `via`,
        `alternatives` and `routingMode`. See also the `return` parameter of `/routes` endpoint.

        The `origin` parameter can be provided to update the start of the previously calculated
        route.

        The `transportMode` parameter does not have to match the transport mode previously used for
        route calculation. However, when using a different transport mode, the request may fail,
        e.g. when the route has road segments forbidden for the provided transport mode.

        Parameters can be provided either in the query string or some selected ones also in the POST
        body. If a parameter is provided in both, the request will fail.

        Post body size limit is 10MiB.

        Please refer to the Developer Guide for more information and examples.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/GetRoutesByHandlePostParameters"
      responses:
        200:
          "$ref": "#/components/responses/RoutesResponseOk"
        400:
          "$ref": "#/components/responses/InvalidRoutesRequestResponse"
        401:
          "$ref": "#/components/responses/401ErrorResponseWithRequestID"
        403:
          "$ref": "#/components/responses/Routing403ErrorResponse"
        500:
          "$ref": "#/components/responses/InternalServerErrorRoutesResponse"
  "/import":
    post:
      operationId: importRoute
      summary: Calculate a route from a sequence of trace points
      tags:
      - Routing
      description: |
        Creates a route from a sequence of trace points.

        Post body size limit is 10MiB.

        For best results, use 1Hz GPS data or any points that have a spacing of a few meters between them.
        For traces with less frequent points, the Route Import service will attempt to create an approximate reconstruction.
        In some situations, when consecutive points are too far apart (more than about 30 kilometers of on-road distance), they could be considered unreachable and one of them could fail to be matched.
      parameters:
      - "$ref": "#/components/parameters/transportMode"
      - "$ref": "#/components/parameters/departureTimeWithAny"
      - "$ref": "#/components/parameters/avoid"
      - "$ref": "#/components/parameters/allow"
      - "$ref": "#/components/parameters/exclude"
      - "$ref": "#/components/parameters/units"
      - "$ref": "#/components/parameters/lang"
      - "$ref": "#/components/parameters/return"
      - "$ref": "#/components/parameters/spans"
      - "$ref": "#/components/parameters/truck"
      - "$ref": "#/components/parameters/vehicle"
      - "$ref": "#/components/parameters/evConsumption"
      - "$ref": "#/components/parameters/fuel"
      - "$ref": "#/components/parameters/xRequestId"
      - "$ref": "#/components/parameters/scooter"
      - "$ref": "#/components/parameters/taxi"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MatchTrace"
          application/geo+json:
            schema:
              "$ref": "#/components/schemas/ImportGeoBody"
      responses:
        200:
          "$ref": "#/components/responses/RoutesResponseOk"
        400:
          "$ref": "#/components/responses/InvalidRoutesRequestResponse"
        401:
          "$ref": "#/components/responses/401ErrorResponseWithRequestID"
        403:
          "$ref": "#/components/responses/Routing403ErrorResponse"
        500:
          "$ref": "#/components/responses/InternalServerErrorRoutesResponse"
  "/health":
    get:
      operationId: getHealth
      summary: Health status of the service
      tags:
      - API Information
      description: Returns the health of the service
      parameters:
      - "$ref": "#/components/parameters/xRequestId"
      security: []
      responses:
        200:
          "$ref": "#/components/responses/HealthResponseOkWithRequestID"
        default:
          "$ref": "#/components/responses/HealthResponseFailWithRequestID"
  "/version":
    get:
      operationId: getVersion
      summary: Full version of the API
      tags:
      - API Information
      description: Returns the version of the service
      parameters:
      - "$ref": "#/components/parameters/xRequestId"
      security: []
      responses:
        200:
          "$ref": "#/components/responses/VersionResponseOkWithRequestID"
        500:
          "$ref": "#/components/responses/500ErrorResponseWithRequestID"
        502:
          "$ref": "#/components/responses/502ErrorResponseWithRequestID"
        503:
          "$ref": "#/components/responses/503ErrorResponseWithRequestID"
        504:
          "$ref": "#/components/responses/504ErrorResponseWithRequestID"
  "/openapi":
    get:
      summary: Retrieves this API specification in OpenAPI 3 format
      operationId: getOpenapi
      tags:
      - API Information
      parameters:
      - "$ref": "#/components/parameters/xRequestId"
      responses:
        200:
          "$ref": "#/components/responses/OpenApiResponseOk"
        500:
          "$ref": "#/components/responses/500ErrorResponseWithRequestID"
        502:
          "$ref": "#/components/responses/502ErrorResponseWithRequestID"
        503:
          "$ref": "#/components/responses/503ErrorResponseWithRequestID"
        504:
          "$ref": "#/components/responses/504ErrorResponseWithRequestID"
components:
  parameters:
    allow:
      name: allow
      description: Explicitly allow features that require users to opt in.
      in: query
      required: false
      style: deepObject
      schema:
        "$ref": "#/components/schemas/Allow"
    alternatives:
      name: alternatives
      description: Number of alternative routes to return aside from the optimal route.
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        maximum: 6
        default: 0
    arrivalTime:
      name: arrivalTime
      description: |
        Specifies the time of arrival as defined by either `date-time` or `full-date` `T` `partial-time` in `RFC 3339`, section 5.6 (for example, `2019-06-24T01:23:45`).
        The requested time is converted to the local time at destination. When the optional timezone offset is
        not specified, time is assumed to be local.
        All `Time` values in the response are returned in the timezone of each location.

        Note : The following features do not support the arrivalTime parameter:
        * EV Routing
        * Route Handle
        * Route Import
      in: query
      allowReserved: true
      required: false
      schema:
        "$ref": "#/components/schemas/Time"
    avoid:
      name: avoid
      description: |
        Avoid roads that violate certain features of road network or that go through
        user-specified areas, segments, or zones.

        Note that if the origin, destination, or any via is in an avoided area or on an avoided
        feature, a route is produced that violates the avoid restriction. In such a case, the
        route is trying to minimize the violation of the avoid restrictions and can therefore
        include large deviations from a route that is calculated without these avoid
        restrictions.

        It is also possible that the produced route violates the avoid restriction in between
        waypoints, if no other route is possible or too hard to find. One such example is
        requesting a route to an island that is only reachable with ferries while specifying
        `avoid[features]=ferry`.

        Further, avoid can cause the route calculation to fail, if no route is possible or too
        hard to find.
      in: query
      allowReserved: true
      required: false
      style: deepObject
      schema:
        "$ref": "#/components/schemas/Avoid"
      examples:
        features:
          summary: Avoid specific features like `tunnel' or `ferry`
          value:
            features: tunnel,ferry
        area:
          summary: Avoid a specific geographical bounding box
          value:
            areas: bbox:13.082,52.416,13.628,52.626
        areas:
          summary: Avoid multiple geographical bounding boxes using `|` as element
            separator
          value:
            areas: bbox:13.3127778,52.5106221,13.3495852,52.5255681|bbox:13.3958343,52.5171209,13.4286456,52.5405511
        complete:
          summary: Avoid both features and geographical bounding boxes
          value:
            features: tollRoad,tunnel&avoid[areas]=bbox:13.082,52.416,13.628,52.626
        segment:
          summary: Avoid a segment using its identifier
          value:
            segments: here:cm:segment:207551710
        segmentsWithDirection:
          summary: Avoid two segments using their identifiers, also specifying the
            direction
          value:
            segments: here:cm:segment:207551710#+,here:cm:segment:76771992#*
        zones:
          summary: Avoid multiple environmental zones using identifiers
          value:
            zoneIdentifiers: here:cm:envzone:2,here:cm:envzone:3
        zoneCategory:
          summary: Avoid all environmental zones
          value:
            zoneCategories: environmental
        zoneCategoryWithException:
          summary: Avoid all environmental zones except a specific one
          value:
            zoneCategories: environmental;exceptZoneIds=here:cm:envzone:2
        truckRoadTypes:
          summary: Avoid the specified truck road types
          value:
            truckRoadTypes: BK1,BK2,BK3,BK4
        tollTransponders:
          summary: Avoid all toll transponders
          value:
            tollTransponders: all
    currency:
      name: currency
      in: query
      description: |
        Currency code compliant to ISO 4217.
        Costs for the calculated route will be returned using this currency.

        If not provided, the router will specify it.
        On a best-effort basis, the router will try to specify the costs in the local currency.
      required: false
      schema:
        type: string
    customizations:
      name: customizations
      description: |
        Specifies a list of customizations to be used. The data provided by these customizations either
        replaces or augments the standard HERE map data. The provided credentials must authorize access
        to all of the customizations specified.

        **Alpha**: This API is in development. It may not be stable and is subject to change.
      in: query
      allowReserved: true
      required: false
      schema:
        type: array
        items:
          "$ref": "#/components/schemas/CustomizationHRN"
    departureTimeWithAny:
      name: departureTime
      description: |
        Specifies the time of departure as defined by either `date-time` or `full-date` `T`
        `partial-time` in `RFC 3339`, section 5.6 (for example, `2019-06-24T01:23:45`).

        The requested time is converted to local time at origin. When the optional timezone offset
        is not specified, time is assumed to be local. The special value `any` can be used to
        indicate that time should not be taken into account during routing. If neither
        `departureTime` or `arrivalTime` are specified, current time at departure place will be
        used. All time values in the response are returned in the timezone of each location.

        **Note**: Only long-term traffic incidents will be used if `departureTime=any` and
        `traffic[mode]=default` or no `traffic[mode]` are specified.
      in: query
      allowReserved: true
      required: false
      schema:
        "$ref": "#/components/schemas/TimeWithAny"
    destination:
      name: destination
      description: |
        A location defining the destination of the trip.

        For a description of the format and options for this parameter, please refer to the description of
        the `origin` parameter.

        `destination` supports the same options as the `origin` parameter, with the following exceptions:

        ## Additional waypoint options:

        * `stopDuration`: desired duration for the stop, in seconds. The section arriving at this
          via waypoint will have a `wait` post action reflecting the stopping time. The
          subsequent section will start at the arrival time of the former section + stop
          duration.
      in: query
      allowReserved: true
      required: true
      schema:
        "$ref": "#/components/schemas/Waypoint"
      examples:
        coordinate:
          value: 51.611571,11.351608
          summary: A simple WGS84 coordinate
        side:
          value: 52.531052,13.384872;sideOfStreetHint=52.530941,13.384939;matchSideOfStreet=always
          summary: Populating sideOfStreetHint in addition to location to avoid ending
            on the wrong side of the street
        course:
          value: 51.611571,11.351608;course=170;radius=20;minCourseDistance=500
          summary: Setting course/radius/minCourseDistance an uncertain GPS coordinate
            of a moving vehicle
        name:
          value: 52.510319,13.285616;nameHint=Kaiserdamm
          summary: Setting nameHint to avoid matching to the wrong location
        duration:
          value: 51.611571,11.351608!stopDuration=600
          summary: Addition a stopDuration for an intermediate stop
    driver:
      name: driver
      in: query
      allowReserved: true
      required: false
      style: deepObject
      schema:
        "$ref": "#/components/schemas/Driver"
    ev:
      name: ev
      in: query
      allowReserved: true
      required: false
      style: deepObject
      schema:
        "$ref": "#/components/schemas/EV"
    evConsumption:
      name: ev
      in: query
      allowReserved: true
      required: false
      style: deepObject
      schema:
        "$ref": "#/components/schemas/EVConsumption"
    exclude:
      name: exclude
      description: |
        Defines properties which will be strictly excluded from route calculation.

        Note - Exclude countries guarantees exclusion, but doesn't guarantee
        finding a route.
      in: query
      required: false
      style: deepObject
      schema:
        "$ref": "#/components/schemas/Exclude"
      examples:
        country:
          summary: Exclude the country of Switzerland from the route calculation
          value:
            countries: CHE
        countries:
          summary: Exclude both the country of Switzerland and the country of Austria
            from the route calculation
          value:
            countries: CHE,AUT
    fuel:
      name: fuel
      in: query
      required: false
      style: deepObject
      explode: true
      schema:
        "$ref": "#/components/schemas/Fuel"
    lang:
      name: lang
      description: |
        Specifies the list of preferred languages of the response.
        The first supported language from the list will be used for for the response if available.
        The next languages are used as fallbacks if the first one is not available.
        Additionally, some more fallback logic is applied if no language is available, like generalizing the requested language code.
        The value should comply with the [IETF BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt).
        A list of supported languages for the routing service, as well as more information on the language fallback logic, can be found in the dev guide https://developer.here.com/documentation/routing-api/dev_guide/topics/languages.html.

        Note: If the first language in the list is not supported exactly, an info notification will be generated with code `mainLanguageNotFound`.
      in: query
      schema:
        type: array
        items:
          type: string
        default:
        - en-US
      style: form
      explode: false
      example: zh-tw,en-gb,en-us
    maxSpeedOnSegment:
      name: maxSpeedOnSegment
      description: 'Specify new base speed for segment by value. Affects route selection
        and the ETA. Cannot increase base speed on segment.

'
      in: query
      allowReserved: true
      style: form
      required: false
      schema:
        "$ref": "#/components/schemas/MaxSpeedOnSegment"
      examples:
        speed:
          summary: Setting new base speed on segment
          value:
            speed: here:cm:segment:76771992#*;speed=42
    origin:
      name: origin
      description: |
        A location defining the origin of the trip.

        ## Format

        Format: `Place[WaypointOptions]`

        * Place: `{lat},{lng}[PlaceOptions]`
        * PlaceOptions: `;option1=value1;option2=value2...`
        * WaypointOptions: `!option1=value1!option2=value2...`

        A waypoint consists of:

        * Exactly one place
        * Optional settings for the place
        * Optional settings for the waypoint itself

        ## Supported place options

        * `course`: int, degrees clock-wise from north. Indicating desired direction at the place.
          E.g. `90` indicating `east`. Often combined with `radius` and/or `minCourseDistance`
        * `sideOfStreetHint`: `{lat},{lng}`. Indicating the side of the street that should be
          used. E.g. if the location is to the left of the street, the router will prefer using
          that side in case the street has dividers. E.g.
          `52.511496,13.304140;sideOfStreetHint=52.512149,13.304076` indicates that the `north`
          side of the street should be preferred. This option is required, if `matchSideOfStreet`
          is set to `always`.
        * `matchSideOfStreet`: enum `[always, onlyIfDivided]`. Specifies how the location set by
          `sideOfStreetHint` should be handled. Requires `sideOfStreetHint` to be specified as
          well.
          + `always` : Always prefer the given side of street.
          + `onlyIfDivided`: Only prefer using side of street set by `sideOfStreetHint` in case
            the street has dividers. This is the default behavior.
        * `nameHint`: string. Causes the router to look for the place with the most similar name.
          The typical examples include: `North` being used to differentiate between
          interstates `I66 North` and `I66 South`, `Downtown Avenue` being used to correctly
          select a residental street.

          Empty string values are ignored.
        * `radius`: int, meters. Asks the router to consider all places within the given radius as
          potential candidates for route calculation. This can be either because it is not
          important which place is used, or because it is unknown. Radiuses wider than 200 meters are
          not supported.
          Option cannot be combined with `snapRadius`.
        * `radiusPenalty`: int, percentage 0-1000. Used in conjunction of `radius` parameter.
          Router will match the waypoint, within the specified radius and penalize candidates according to air distance
          to the waypoint. Penalty is proportional to given percentage, 100 being just cost of air distance and 200 double.
          Currently works only for pedestrian/bicycle routes.
          **Alpha**: This parameter is in development. It may not be stable and is subject to change.
        * `snapRadius`: int, meters. Instructs the router to match the waypoint, within the specified radius,
          to the most "significant" road. In contrast to the regular `radius` parameter, `snapRadius` sorts potential
          candidates in order of "significance". For example, a highway is more significant on a zoomed-out map than
          a national road, a national road is more significant than a city road, etc. Hence, `snapRadius` cannot be
          combined with `radius` parameter. The typical use case for `snapRadius` is when selecting a waypoint on a
          zoomed-out view of a map on a drag-and-drop interface. The expectation on such UIs is that only roads that
          are visible at that zoom level are considered for matching and a large snapRadius would enable that.
        * `minCourseDistance`: int, meters. Instructs the routing service to try to find a route that avoids actions for the indicated distance.
          For example, if the origin is determined by a moving vehicle, the user might not have time to react to early actions.
        * `customizationIndex`: int. Specifies the zero-based index into the list of customizations
          specified in the `customizations` parameter. The customization at that index must be an
          Extension Map.
          Providing a `customizationIndex` indicates the this waypoint is located within that
          Extension Map.
          **Alpha**: This customization API parameter is in development. It may not be stable and is subject to change.
        * `segmentIdHint`: string. Causes the router to try and match to the specified segment.
          Waypoint coordinates need to be on the segment, otherwise waypoint will be matched ignoring the segment hint
          This parameter can be used when the waypoint is too close to more than one segment to force matching to a specific one.
        * `onRoadThreshold`: int, meters. allows specifying a distance within which
          the waypoint could be considered as being on a highway/bridge/tunnel/sliproad.
          Within this threshold, the attributes of the segments do not impact the matching.
          Outside the threshold only segments which aren't one of highway/bridge/tunnel/sliproad can be matched.

        ## Notes

        * `stopDuration` option is not supported for `origin`, contrary to `destination` and
          `via` waypoints.
        * `passThrough`: option is not supported for 'origin'.
        * Non-structural reserved characters in options' values need to be properly percent-encoded.
          Please refer to the Developer Guide for more details.
      in: query
      allowReserved: true
      required: true
      schema:
        "$ref": "#/components/schemas/Waypoint"
      examples:
        coordinate:
          value: 51.611571,11.351608
          summary: A simple WGS84 coordinate
        side:
          value: 52.531052,13.384872;sideOfStreetHint=52.530941,13.384939;matchSideOfStreet=always
          summary: Populating sideOfStreetHint in addition to location to avoid ending
            on the wrong side of the street
        course:
          value: 51.611571,11.351608;course=170;radius=20;minCourseDistance=500
          summary: Setting course/radius/minCourseDistance an uncertain GPS coordinate
            of a moving vehicle
        name:
          value: 52.510319,13.285616;nameHint=Kaiserdamm
          summary: Setting nameHint to avoid matching to the wrong location
    pedestrianSpeed:
      name: pedestrian[speed]
      description: 'Walking speed in meters per second. Influences the duration of
        walking segments along the route.

'
      in: query
      schema:
        "$ref": "#/components/schemas/PedestrianSpeed"
    rerouting:
      name: rerouting
      in: query
      required: false
      style: deepObject
      schema:
        "$ref": "#/components/schemas/Rerouting"
    return:
      name: return
      description: |
        Defines which attributes are included in the response as part of data representation of a
        `Route` or `Section`.

        * `polyline` - Polyline for the route in [Flexible Polyline](https://github.com/heremaps/flexible-polyline) Encoding.
         Either a 2D polyline (without `elevation` specified), or a 3D polyline with the 3rd dimension type `Elevation` (with `elevation` specified).
        * `actions` - Actions (such as maneuvers or tasks) that must be taken to complete the section.
        * `instructions` - Include instructions in returned actions. Instructions are localized to the requested language.
        * `summary` - Include summary for the section.
        * `travelSummary` - Include summary for the travel portion of the section.
        * `turnByTurnActions` - Include all information necessary to support turn by turn guidance to complete the section.
        * `mlDuration` - Use a region-specific machine learning model to calculate route duration.
          **Disclaimer: This parameter is currently in beta release, and is therefore subject to breaking changes.**
        * `typicalDuration` - Include route duration under typical traffic conditions.
        * `elevation` - Include elevation information in coordinate and geometry types. See e.g. `polyline` or `location`.
        * `routeHandle` - Encode calculated route and return a handle which can be used with
        `routes/{routeHandle}` to decode the route at a later point in time.
        * `passthrough` - Include information on passthrough via waypoints in the section.
        * `incidents` - Include a list of all incidents applicable to each section.
           Incidents are localized to the requested language.
           This requires `incidents` to be specified as part of the `return` parameter.
        * `routingZones` - Include information about routing zones each section goes through.
        * `truckRoadTypes` - Include information about road types each section goes through.
        * `tolls` - Include information about the tolls to be paid, per section, according to the `tolls` parameter and other toll-influencing
          parameters such as vehicle dimensions in the query,
          e.g `transportMode`, `vehicle[hovOccupancy]`, truck[height]. The full list of toll-related attributes is available in the
          [Tolls](https://developer.here.com/documentation/routing-api/dev_guide/topics/use-cases/tolls.html) page of the Developer Guide
          If tolls cannot be calculated for a section, it will contain the `tollsDataUnavailable` notice code.
          **Note**: some toll-related options such as cars with trailers, or vehicle fuel related tolls are planned but not implemented at the moment.
          Therefore the request will return the most "typical" toll cost.

        The following restrictions apply when specifying the `return` parameter:

        * If `actions` is requested, then `polyline` must also be requested as well.
        * If `instructions` is requested, then `actions` must also be requested as well.
        * If `turnByTurnActions` is requested, then `polyline` must also be requested as well.
        * If at least one attribute is requested within the `spans` parameter, then `polyline` must be request as well
      in: query
      schema:
        type: array
        uniqueItems: true
        items:
          "$ref": "#/components/schemas/Return"
      style: form
      explode: false
    routeHandle:
      name: routeHandle
      in: path
      description: |
        Route handle returned from a previous route calculation.

        See `return` parameter of `/routes` endpoint for more information.
      required: true
      schema:
        type: string
    routeHandleOrigin:
      name: origin
      description: |
        A location defining the origin of the trip. The origin has to be located along the
        previously calculated route.

        For a description of the format and options for this parameter, please refer to the description of
        the `origin` parameter in `Calculate routes via GET`.

        This parameter supports the same options as the `origin` parameter in `Calculate routes via GET`,
        with the following exceptions:

        ## Notes

        * `minCourseDistance`: While this parameter can be provided for compatibility reasons,
          it will not affect the result of a getRoutesByHandle request.
      in: query
      allowReserved: true
      required: false
      schema:
        "$ref": "#/components/schemas/Waypoint"
      examples:
        coordinate:
          value: 51.611571,11.351608
          summary: A simple WGS84 coordinate
        side:
          value: 52.531052,13.384872;sideOfStreetHint=52.530941,13.384939;matchSideOfStreet=always
          summary: Populating sideOfStreetHint in addition to location to avoid ending
            on the wrong side of the street
        course:
          value: 51.611571,11.351608;course=170;radius=20
          summary: Setting course/radius an uncertain GPS coordinate of a moving vehicle
        name:
          value: 52.510319,13.285616;nameHint=Kaiserdamm
          summary: Setting nameHint to avoid matching to the wrong location
    routingMode:
      name: routingMode
      description: |
        Specifies which optimization is applied during route calculation.

        * `fast`: Route calculation from start to destination optimized by travel time. In many
          cases, the route returned by the `fast` mode may not be the route with the fastest
          possible travel time. For example, the routing service may favor a route that remains on
          a highway, even if a faster travel time can be achieved by taking a detour or shortcut
          through an inconvenient side road.
        * `short`: Route calculation from start to destination disregarding any speed information.
          In this mode, the distance of the route is minimized, while keeping the route sensible.
          This includes, for example, penalizing turns. Because of that, the resulting route will
          not necessarily be the one with minimal distance.

        Notes:
        * The following Transport modes only support `fast` routingMode
          - `bicycle`
          - `bus`
          - `pedestrian`
          - `privateBus`
          - `scooter`
          - `taxi`
      in: query
      required: false
      schema:
        "$ref": "#/components/schemas/RoutingMode"
    scooter:
      name: scooter
      description: |
        Scooter-specific parameters.
          * `allowHighway`: Specifies whether the scooter is allowed on highways or not. This parameter is optional.
            If not provided, the default is to avoid highways.
            There is a similar parameter avoid[features]=controlledAccessHighway to disallow highway usage.
            avoid[features] takes precedence, so if that parameter is also used, scooters are not allowed
            to use highways even if `allowHighway` is set to `true`.
            The following values are possible:
              * `true`: The scooter is allowed to use highways.
              * `false`: The scooter is not allowed to use highways.
      in: query
      required: false
      style: deepObject
      explode: true
      schema:
        "$ref": "#/components/schemas/Scooter"
    spans:
      name: spans
      in: query
      required: false
      description: |
        Defines which map content attributes are included in the response spans. For example, `attributes,length` will enable the fields `attributes` and `length` in the route response.
        For more information about the `countryCode` field, see https://www.iso.org/obp/ui/#search.

        This parameter also requires that the `polyline` option is set within the `return` parameter.

        **NOTE:** Attribute speedLimit is deprecated, use maxSpeed instead. Attribute segmentId is deprecated, use segmentRef instead.
      style: form
      explode: false
      schema:
        type: array
        uniqueItems: true
        items:
          "$ref": "#/components/schemas/Spans"
    taxi:
      name: taxi
      description: |
        Taxi-specific parameters.
          * `allowDriveThroughTaxiRoads`: Specifies if a vehicle is allowed to drive through
            taxi-only roads and lanes. Even if this option is set to `false`, the vehicle is still
            allowed on taxi-only roads at the start of the route and at the destination.

            **Disclaimer**: This parameter is currently provided as Beta with limited functionality.
      in: query
      required: false
      style: deepObject
      explode: true
      schema:
        "$ref": "#/components/schemas/Taxi"
    tolls:
      name: tolls
      description: 'Defines properties which control toll calculation and reporting
        in the response.

'
      in: query
      required: false
      style: deepObject
      schema:
        "$ref": "#/components/schemas/Tolls"
    traffic:
      name: traffic
      description: Traffic specific parameters.
      in: query
      required: false
      style: deepObject
      explode: true
      schema:
        "$ref": "#/components/schemas/Traffic"
    transportMode:
      name: transportMode
      description: |
        Mode of transport to be used for the calculation of the route.

        Note:
        `bicycle`, `bus`, `privateBus`, and `taxi` modes are currently provided as Beta, with limited functionality.
        Please refer to the Developer Guide for more details.
      in: query
      required: true
      schema:
        "$ref": "#/components/schemas/RouterMode"
    truck:
      name: truck
      description: |
        Truck-specific parameters. Please note that truck parameters are deprecated, and vehicle parameters should be used instead. Truck parameters cannot be used together with vehicle parameters.
          * `shippedHazardousGoods`:
            A comma-separated list of hazardous goods being shipped in the vehicle. The following values are possible:
            * `explosive`: Materials that are capable of causing an explosion.
            * `gas`: Gas (definition varies from country to country). For details, check [here](https://en.wikipedia.org/wiki/HAZMAT_Class_2_Gases).
            * `flammable`: Materials that can easily catch fire.
            * `combustible`: Materials that have the potential to burn.
            * `organic`: Organic materials or compounds.
            * `poison`: Substances that can cause harm or death when ingested, inhaled, or absorbed.
            * `radioactive`: Materials that emit radiation and pose potential health risks.
            * `corrosive`: Substances that can cause damage or destruction through chemical reactions.
            * `poisonousInhalation`: Materials that are toxic when inhaled.
            * `harmfulToWater`: Materials that can cause pollution or harm to water bodies.
            * `other`: Other types of hazardous materials not covered by the above categories.
          * `grossWeight`: Vehicle weight including trailers and shipped goods, specified in kilograms.
          * `weightPerAxle`: Vehicle weight per axle, specified in kilograms.
          * `weightPerAxleGroup`: Weight of different axle groups such as single and tandem axles, specified in kilograms.
          * `height`: Vehicle height, specified in centimeters.
          * `width`: Vehicle width, specified in centimeters.
          * `length`: Vehicle length, specified in centimeters.
          * `tunnelCategory`: The tunnel category used to restrict the transport of specific goods.
            The following values are possible:
              * `B`
              * `C`
              * `D`
              * `E`
          * `axleCount`: Total number of axles in the vehicle.
          * `type`: The type of truck. The following values are possible:
              * `straight`: A truck on a single frame with a permanently attached cargo area.
              * `tractor`: A towing vehicle that can pull one or more semi-trailers (also known as a semi-truck).
          * `trailerCount`: The number of trailers attached to the vehicle.
          * `payloadCapacity`: The allowed payload capacity of the vehicle including trailers, specified in kilograms.
      deprecated: true
      in: query
      required: false
      style: deepObject
      explode: true
      schema:
        "$ref": "#/components/schemas/Truck"
    units:
      name: units
      description: 'Units of measurement used in guidance instructions. The default
        is `metric`.

'
      in: query
      required: false
      schema:
        "$ref": "#/components/schemas/Units"
    vehicle:
      name: vehicle
      description: |
        Vehicle-specific parameters.
          * `shippedHazardousGoods`:
            A comma-separated list of hazardous goods being shipped in the vehicle. The following values are possible:
            * `explosive`: Materials that are capable of causing an explosion.
            * `gas`: Gas (definition varies from country to country). For details, check [here](https://en.wikipedia.org/wiki/HAZMAT_Class_2_Gases).
            * `flammable`: Materials that can easily catch fire.
            * `combustible`: Materials that have the potential to burn.
            * `organic`: Organic materials or compounds.
            * `poison`: Substances that can cause harm or death when ingested, inhaled, or absorbed.
            * `radioactive`: Materials that emit radiation and pose potential health risks.
            * `corrosive`: Substances that can cause damage or destruction through chemical reactions.
            * `poisonousInhalation`: Materials that are toxic when inhaled.
            * `harmfulToWater`: Materials that can cause pollution or harm to water bodies.
            * `other`: Other types of hazardous materials not covered by the above categories.
          * `grossWeight`: Vehicle weight including trailers and shipped goods, specified in kilograms.
          * `weightPerAxle`: Vehicle weight per axle, specified in kilograms.
          * `weightPerAxleGroup`: Weight of different axle groups, such as single and tandem axles, specified in kilograms.
          * `height`: Vehicle height, specified in centimeters.
          * `width`: Vehicle width, specified in centimeters.
          * `length`: Vehicle length, specified in centimeters.
          * `tunnelCategory`: The tunnel category used to restrict the transport of specific goods. The following values are possible:
              * `B`
              * `C`
              * `D`
              * `E`
          * `axleCount`: Defines the total number of axles in the vehicle.
          * `trailerAxleCount`: The total number of axles across all the trailers attached to the vehicle.
          * `type`: The type of vehicle. The following values are possible:
              * `straightTruck`: A truck on a single frame with a permanently attached cargo area. This values is only applicable when the truck routing mode is used.
              * `tractor`: A towing vehicle that can pull one or more semi-trailers (also known as a semi-truck). This values is only applicable when the truck routing mode is used.
          * `trailerCount`: The number of trailers attached to the vehicle.
          * `engineSizeCc` : The engine size of the vehicle in cubic centimeters.
            Currently, the value is used only in scooter mode.
            This parameter is utilized to determine if the scooter can be classified as a moped.
            Scooters with an engine size less than 51cc are considered mopeds.
            **Alpha**: This API is in development. It may not be stable and is subject to change. It may have no impact on response.
          * `occupancy` : The number of occupants in the vehicle, defined as individuals occupying a seat.
            **Alpha**: This API is in development. It may not be stable and is subject to change. It may have no impact on response.
          * `kpraLength`: Specifies kingpin to rear axle length, in centimeters.
      in: query
      required: false
      style: deepObject
      explode: true
      schema:
        "$ref": "#/components/schemas/Vehicle"
    via:
      name: via
      description: |
        A location defining a via waypoint.

        A via waypoint is a location between origin and destination. There are two types of via waypoints:
        * `passThrough=false` (default) : The route will stop at the via waypoint, creating a new route section.
        * `passThrough=true` : The route will pass through the via waypoint.

        Multiple waypoints can be specified by using multiple via parameters like
        `via=...&via=...`, in which case the route will traverse these waypoints sequentially in
        the order specified in the request.

        For a description of the format and options for this parameter, please refer to the description of
        the `origin` parameter.
        `via` supports the same options as the `origin` parameter, with the following exceptions:

        ## Additional waypoint options:
        * `stopDuration`: desired duration for the stop, in seconds.
        * `passThrough`: boolean. Default value is `false`.
           Setting to `true` asks the router to avoid the following during route calculation:
          + Introducing a stop at the waypoint.
          + Splitting the route into sections.
          + Changing the direction of travel.

          The following scenarios are not supported for `passThrough` parameter:
          + Setting both `stopDuration` to a value greater than 0 and `passThrough=true`.
          + Setting `passThrough=true` for `origin` or `destination` of a route.
      in: query
      allowReserved: true
      style: form
      explode: true
      required: false
      schema:
        type: array
        items:
          "$ref": "#/components/schemas/Waypoint"
      examples:
        coordinate:
          value: 51.611571,11.351608
          summary: A simple WGS84 coordinate
        side:
          value: 52.531052,13.384872;sideOfStreetHint=52.530941,13.384939;matchSideOfStreet=always
          summary: Populating sideOfStreetHint in addition to location to avoid ending
            on the wrong side of the street
        course:
          value: 51.611571,11.351608;course=170;radius=20;minCourseDistance=500
          summary: Setting course/radius/minCourseDistance an uncertain GPS coordinate
            of a moving vehicle
        name:
          value: 52.510319,13.285616;nameHint=Kaiserdamm
          summary: Setting nameHint to avoid matching to the wrong location
        duration:
          value: 51.611571,11.351608!stopDuration=600
          summary: Addition a stopDuration for an intermediate stop
        pass-through:
          value: 51.611571,11.351608!passThrough=true
          summary: Setting pass-through parameter to avoid possibly making a u-turn
            for a stop
    xRequestId:
      name: X-Request-ID
      in: header
      description: User-provided token that can be used to trace a request or a group
        of requests sent to the service.
      schema:
        type: string
  headers:
    X-Correlation-Id:
      description: Auto-generated id that univocally identifies the request.
      schema:
        type: string
      example: 4199533b-6290-41db-8d79-edf4f4019a74
    X-Request-Id:
      description: User-provided token that can be used to trace a request or a group
        of requests sent to the service.
      schema:
        type: string
      example: 8230d7ad-3f1c-4191-a8dd-f3c42026da89
  securitySchemes:
    ApiKey:
      type: apiKey
      in: query
      name: apiKey
      description: 'A key generated specifically to authenticate API requests. For
        more information on how to get an API key, see https://developer.here.com/documentation/identity-access-management/dev_guide/index.html.

'
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        A token obtained from a separate endpoint using client credentials and an OAuth 1.0a HMAC-SHA256 signed request.
        For more information on how to get a bearer token, see https://developer.here.com/documentation/identity-access-management/dev_guide/index.html.
  schemas:
    AccessAttributes:
      description: "Extensible enum: `open` `noThrough` `tollRoad` `...`  \n`AccessAttributes`
        is applied to a span of a route section and describes access flags of a street.\n\n*
        `open`: A part of the route that can be traversed.\n* `noThrough`: A part
        of the route that can only be traversed if origin, destination or any via
        waypoint is located there.\n* `tollRoad`: Access to this part of the route
        is restricted with a fee (or toll).\n\nAs it is possible that new access attributes
        are supported in the future, unknown access attributes should be ignored.\n"
      type: string
      x-extensible-enum:
      - open
      - noThrough
      - tollRoad
    Allow:
      type: object
      description: Explicitly allow features that require users to opt in.
      properties:
        hov:
          description: |
            This parameter specifies whether HOV lanes can be used in the calculation.

            An HOV (High occupancy Vehicle) lane or carpool lane is reserved for carpool usage.
            Carpool lane requires a minimum number of passengers in order for the car to use the
            carpool lane.

            **Notes**:
              - This parameter can't be used with 'vehicle[hovOccupancy]'.
              - This parameter can be used with `vehicle[occupancy]`. If `vehicle[occupancy]` is set, then only HOV lanes allowing this number of occupants will be allowed.
              - In case of violation, `violatedCarpool` notice will be returned.
          type: boolean
          default: false
        hot:
          description: |
            This parameter specifies whether HOT lanes can be used in the calculation.

            HOT (high-occupancy toll) lanes are HOV lanes where vehicles that do not qualify as high-occupancy are allowed to pass by paying a toll.

            **Notes**:
              - This parameter can't be used with 'vehicle[hovOccupancy]'.
              - This parameter can be used with `allow[hov]`.
              - In case of violation, `violatedCarpool` notice will be returned.
              - No toll information is returned for HOT lanes since it is dynamic information.
          type: boolean
          default: false
    AttributionLinkType:
      description: |
        Attribution link type.

        * `disclaimer` - Page with further legal information from the agency.
        * `tariff` - Page with information on the tariff.
      type: string
      required:
      - type
      enum:
      - disclaimer
      - tariff
    AuthErrorResponseSchema:
      properties:
        error:
          type: string
          description: Human-readable error
        error_description:
          type: string
          description: Human-readable error description
    Avoid:
      type: object
      properties:
        features:
          description: |
            A comma-separated list of features that routes should avoid.

            * `seasonalClosure`
            * `tollRoad`
            * `controlledAccessHighway`
            * `ferry`
            * `carShuttleTrain`
            * `tunnel`
            * `dirtRoad`
            * `difficultTurns`: This option avoids difficult turns, sharp turns and U-turns on highways and motorways. It is only supported for the `truck` transport mode.
            * `uTurns`: This option avoids U-turns on highways and motorways. It is not supported for pedestrian, bicycle and scooter transport modes.
          type: string
        areas:
          description: |
            A pipe separated list of user-defined areas that routes should avoid going through.
            The list is limited to 250 items.

            Format: `{shape1}|{shape2}|{shape3}...`

            Supported shape format:
            * Bounding box - A rectangular area on earth defined by a comma separated list of two latitude and two longitude values.
              - Format: `bbox:{west},{south},{east},{north}`
                + `{west}`  - Longitude value of the westernmost point of the area.
                + `{south}` - Latitude value of the southernmost point of the area.
                + `{east}`  - Longitude value of the easternmost point of the area.
                + `{north}` - Latitude value of the northernmost point of the area.
              - Example: `bbox:13.082,52.416,13.628,52.626` - Bounding box of Berlin
            * Polygon - A polygon on earth which defines area to avoid.
              Possible formats:
              1) As list of geopoints.
                - Format: `polygon:{lat},{lon};{lat},{lon};{lat},{lon}...`
                  + `{lat}` - Latitude
                  + `{lon}` - Longitude
                - Example: `polygon:52.416,13.082;52.626,13.628;52.916,13.482` - Polygon in Berlin
              2) As [Flexible Polyline](https://github.com/heremaps/flexible-polyline) Encoding.
                - Support only 2D polyline (without `elevation` specified).
                - Format: `polygon:{encoded_polyline}`
                  + `{encoded_polyline}` - encoded [Flexible Polyline](https://github.com/heremaps/flexible-polyline)
                - Example: `polygon:BF05xgKuy2xCx9B7vUl0OhnR54EqSzpEl-HxjD3pBiGnyGi2CvwFsgD3nD4vB6e`
              Notes:
              * Maximal count of polygons is 20. Count of bounding boxes + polygons <= 250
              * Minimal count of coordinates in one polygon is 3. If less - corresponding error will be returned.
              * Maximal count of coordinates in one polygon is 16. If more - corresponding error will be returned.
              * The polygon is closed automatically, there is no need to duplicate the first point as the last one.
              * Self-intersecting polygons are not supported. If they are present in the request, the corresponding error will be returned.
          type: string
        segments:
          description: |
            A comma separated list of segment identifiers that routes should avoid going through.

            Each entry has the following structure:
            `{segmentId}(#{direction})?`

            The individual parts are:
            * segmentId: The identifier of the referenced topology segment inside the catalog, example: `here:cm:segment:207551710`
            * direction (optional): Either '*' for bidirectional (default), '+' for positive direction, or '-' for negative direction

            Example of a parameter value excluding two segments:
            `here:cm:segment:207551710#+,here:cm:segment:76771992#*`

            **Note**: Maximum number of penalized segments in one request should not be greater than 250.
                      "Penalized segments" refers to segments that either have a restriction on maximum baseSpeed with `maxSpeedOnSegment`
                      or avoided with `avoid[segments]`
          type: string
        zoneCategories:
          description: |
            Specifies a list of categories of zones which routes should avoid going through.

            Format: `Categories[ZoneCategoryOptions]`

            * Categories: `{cat1},{cat2}...`
              A comma separated list of zone categories.
            * ZoneCategoriesOptions (optional): `;option1=value1;options2=value2...`
              A list of options for zone categories in `KEY=VALUE` form.

            Supported zone category options:
              * exceptZoneIds: A comma-separated list of zone identifiers, which should not be taken into account for evaluation of zone categories to avoid.

            Supported zone categories:
              * `vignette`
              * `congestionPricing`
              * `environmental`

            Example of zone categories avoidance:
            `avoid[zoneCategories]=environmental,vignette`

            Example of zone categories avoidance with exceptions:
            `avoid[zoneCategories]=environmental,vignette;exceptZoneIds=here:cm:envzone:3`
          type: string
        zoneIdentifiers:
          description: |
            A comma separated list containing identifiers of zones that routes should avoid going through.

            Example of an identifier referencing an environmental zone:
            `here:cm:envzone:2`
          type: string
        truckRoadTypes:
          description: |
            A comma-separated list of truck road type identifiers to be avoided.

            A truck road type is an identifier associated with roads that have additional regulations applied by local administration for traversal by heavy vehicles like trucks.
            For example, the BK Bearing Class regulations in Sweden, and ET categories in Mexico.
            Identifiers for supported truck road types are specified in HERE Map Content
            [TruckRoadType](https://developer.here.com/documentation/here-map-content/dev_guide/topics_schema/truckroadtypeattribute.truckroadtype.html).

            Example: `avoid[truckRoadTypes]=BK1,BK2,BK3,BK4`
          type: string
          example: BK1,BK2,BK3,BK4
        tollTransponders:
          description: |
            Specifies that routes should avoid all toll transponders.

            Example: `avoid[tollTransponders]=all`
          type: string
    AvoidPost:
      type: object
      description: |
        Avoid routes that violate certain features of road network or that go through
        user-specified geographical bounding boxes.

        For the general description of the functionality please refer to the `avoid` parameter of the
        query string.

        Passing parameters in the POST body is suggested when the length of the parameters exceeds the
        limitation of the GET request.
      properties:
        segments:
          description: |
            An array of segment identifiers that routes will avoid going through.

            Each entry has the following structure:
            `{segmentId}(#{direction})?`

            The individual parts are:
            * segmentId: The identifier of the referenced topology segment inside the catalog, example: `here:cm:segment:207551710`
            * direction (optional): Either '*' for bidirectional (default), '+' for positive direction, or '-' for negative direction

            Example of a parameter value excluding two segments:
            `["here:cm:segment:207551710#+", "here:cm:segment:76771992#*"]`

            **Note**: Maximum amount of penalized segments in one request should not be grater than 250.
                      "Penalized segments" refers to segments that have a restriction on maximum baseSpeed with `maxSpeedOnSegment`
                      or avoided with `avoid[segments]`
          type: array
          items:
            type: string
    AxleGroupWeight:
      description: 'Contains the maximum allowed weight for an axle-group.

'
      properties:
        maxWeight:
          description: Maximum weight of the axle-group-weight restriction, in kilograms.
          type: integer
          format: int32
          minimum: 0
        axleGroup:
          description: "Extensible enum: `single` `tandem` `triple` `quad` `quint`
            `...`  \nAxle-group associated with the restriction.\n\nPossible values
            are:\n\n* single\n* tandem\n* triple\n* quad\n* quint\n"
          type: string
          x-extensible-enum:
          - single
          - tandem
          - triple
          - quad
          - quint
    BaseNoticeDetail:
      properties:
        title:
          type: string
          description: Detail title
        cause:
          type: string
          description: Cause of the notice
        type:
          type: string
          description: |
            Detail type. Each type of detail might contain extra attributes.

            **NOTE:** The list of possible detail types may be extended in the future.
            The client application is expected to handle such a case gracefully.
      required:
      - type
    CO2Emission:
      type: number
      description: Estimation of the carbon dioxide emission for the given route.
        Unit is kilograms with precision to three decimal places.
    ChargingConnectorType:
      description: "Extensible enum: `iec62196Type1Combo` `iec62196Type2Combo` `chademo`
        `tesla` `...`  \nCurrently supported connector types are:\n* `iec62196Type1Combo`:
        \ Type 1 Combo connector, commonly called \"SAE J1772\"\n* `iec62196Type2Combo`:
        \ Type 2 Combo connector, commonly called \"Mennekes\"\n* `chademo`: CHAdeMO
        connector\n* `tesla`: Tesla connector\n"
      type: string
      x-extensible-enum:
      - iec62196Type1Combo
      - iec62196Type2Combo
      - chademo
      - tesla
    ChargingStationBrand:
      description: Information regarding the charging station brand
      properties:
        name:
          description: Charging station brand name
          type: string
        hrn:
          description: |
            Charging station brand unique ID.
            If specified in `ev[preferredBrands]` parameter
            then it would apply preference to adding stations of the given brand.

            **NOTE:** As of now it is generated as a brand name hash.
            It will be changed to HRN (HERE Resource Name) in the future.
          type: string
    ChargingSupplyType:
      description: "Extensible enum: `acSingle` `acThree` `dc` `...`  \nCurrently
        possible values are:\n\n* `acSingle` : Single phase Alternating Current supply\n*
        `acThree`: Three phase Alternating Current supply\n* `dc`: Direct Current
        supply\n"
      type: string
      x-extensible-enum:
      - acSingle
      - acThree
      - dc
    Color:
      type: string
      pattern: "#[0-9A-Fa-f]{6}"
      example: "#FF0000"
    Consumption:
      type: number
      description: |
        Energy or fuel consumption.
        For EV energy consumption is in kilowatt hours (kWh). For fuel-based vehicles fuel consumption is in Liters (L) for diesel, petrol and LPG vehicles, and Kilograms (kg) for CNG vehicles.
    ConsumptionSpeedTable:
      type: string
      description: |
        Function curve specifying consumption rate at a given speed.

        The format of the string is a comma-separated list of numbers, as follows:

        ```
        <SPEED_0>,<CONSUMPTION_0>,<SPEED_1>,<CONSUMPTION_1>,...,<SPEED_N>,<CONSUMPTION_N>
        ```

        where speed values are strictly increasing, non-negative integers in units of (km/h), and
        consumption values are non-negative floating point values.

        * Unit for EV:
        | Vehicle Type | Unit |
        |--------------|------|
        | Electric | Wh/m i.e., Watt-hours per meter|

        * Units for Fuel-based vehicles:
        | Vehicle Type | Unit |
        |--------------|------|
        | Diesel, Petrol & LPG | ml/m i.e., milliliters per meter|
        | CNG | gm/m i.e., grams per meter|

        The function is linearly interpolated between data points. For speeds less than `SPEED_0`
        the value of the function is `CONSUMPTION_0`, and for speeds greater than `SPEED_N` the
        value of the function is `CONSUMPTION_N`.
      example: 0,0.2394,14,0.2394,36,0.2586,52,0.196,68,0.2074,83,0.238,95,0.2597,105,0.2597,115,0.2964,125,0.3367,135,0.3508
    ConsumptionType:
      description: "Extensible enum: `electric` `diesel` `petrol` `lpg` `cng` `...`
        \ \nVehicle consumption type. The energy or fuel consumption type (electric,
        diesel, petrol, lpg, and cng)\nof a vehicle which provides the relevant information
        required to parse (unit, etc.) the energy or fuel\n`consumption` value of
        a vehicle.\n"
      type: string
      x-extensible-enum:
      - electric
      - diesel
      - petrol
      - lpg
      - cng
    CountryCode:
      description: ISO-3166-1 alpha-3 code
      type: string
      example: FRA
    CustomizationHRN:
      description: 'HERE Resource Name identifier for customization. This HRN must
        follow a convention below: hrn:here:<service_id>::<customer-realm-id>:custom:<customization_type>:<customization_id>.'
      type: string
      pattern: "^hrn:here:[a-z]+::[a-z|-]+:custom:[a-z|-]+$"
      example: hrn:here:routing::olp-abc:custom:extension-map:abc-yard-routing
    DataVersion:
      description: Version of a specific data set
      properties:
        name:
          type: string
          description: Identifies a data set, for example, a HRN, or a service specific
            identifier
          example: optimized-map-for-routing
        version:
          type: string
          description: The current version of this data set
          example: 2022.346.5.48
      required:
      - name
      - version
    DepartureDelay:
      description: The accumulated delay in seconds from the scheduled time of the
        event.
      type: integer
    DepartureStatus:
      description: "Extensible enum: `scheduled` `cancelled` `additional` `replaced`
        `...`  \nStatus of the departure\n\n* `scheduled`: A trip that is running
        as planned in the schedule.\n* `cancelled`: A trip that existed in the schedule
        but was removed.\n* `additional`: An extra trip that was added in addition
        to a running schedule, for example, to respond to sudden passenger load.\n*
        `replaced`: A trip that was in the schedule but is removed and replaced with
        `additional` trip, for example, to replace a broken vehicle or handle detour.\n"
      type: string
      x-extensible-enum:
      - scheduled
      - cancelled
      - additional
      - replaced
      default: scheduled
    Distance:
      type: integer
      minimum: 0
      description: Distance in meters.
      example: 189
    Driver:
      description: |
        Driver parameters to be used for calculating routes with automatically added
        rest stops.
      properties:
        schedule:
          type: string
          description: |
            A comma separated list of duration pairs in seconds. Each pair is two positive greater than zero integers.
            The first specifies the maximum allowed drive time before stopping to rest, and the second the resting time before continuing driving.

            Format `driveTime,restTime[,driveTime,restTime]...`

            * driveTime - duration in seconds, describes maximum driving time allowed in a route's section
              next stop or route end
            * restTime - duration in seconds, describes minimum resting time required before continuing driving

            The routing engine adds necessary stops for rest to fulfill driver work hours requirements.
            If the route duration exceeds the defined drive-rest sequence the remaining route is added as the last drive section
            (or several sections if there are `via` waypoints on the remaining route) with critical notice `travelTimeExceedsDriverWorkHours`.
            `driver[schedule]` is not supported in combination with any of those parameters: `arrivalTime`, `ev[makeReachable]`.
            Also, `driver[schedule]` doesn't support route alternatives. So `alternatives` parameter value is ignored in combination
            with `driver[schedule]`.
    Duration:
      type: integer
      description: Duration in seconds.
      example: 198
    EVPost:
      type: object
      properties:
        preferredBrands:
          description: |
            An array of charging station brand IDs. If `makeReachable` is set to `true`, then charging stations from the specified brands
            will be preferred as potential charging stops, even if this makes the total route duration (travel time plus charging time) longer (up to 15 minutes per charging stop)

            Example of a parameter value preferring two charging station brands:
            `["6e1a148e8ddf06f613599134197b7c1c","6211c90a063d36429b599dda79ae85e3"]`
          type: array
          items:
            type: string
    ErrorResponse:
      description: Response in case of error
      properties:
        title:
          type: string
          description: Human-readable error description
          example: Input data failed validation
        status:
          type: integer
          description: HTTP status code
          example: 400
        code:
          type: string
          description: |
            Error code.

            All error codes start with "`E60`".
          example: E600101
        cause:
          type: string
          description: Human-readable explanation for the error
          example: The input data in question does not comply with validation rules
        action:
          type: string
          description: Human-readable description of the action that can be taken
            to correct the error
          example: Request a valid id
        correlationId:
          type: string
          description: Auto-generated id that univocally identifies the request
          example: 4199533b-6290-41db-8d79-edf4f4019a74
      required:
      - title
      - status
      - code
      - cause
      - action
      - correlationId
    Exclude:
      type: object
      description: Options to exclude strictly during the route calculation.
      properties:
        countries:
          description: |
            A comma separated list of three-letter country codes (ISO-3166-1 alpha-3 code) that
            routes will exclude.
          type: string
    FarePassValidityPeriod:
      description: Specifies a temporal validity period for a pass
      properties:
        period:
          description: "Extensible enum: `annual` `extendedAnnual` `minutes` `days`
            `months` `...`  \nSpecifies one of the following validity periods:\n  -
            `annual`: pass is valid from Jan 1 to Dec 31\n  - `extendedAnnual`: pass
            is valid from Jan 1 to Jan 31 of the following year\n  - `minutes`: pass
            is valid for a specified number of minutes See `unit`.\n  - `days`: pass
            is valid for a specified number of days. See `unit`.\n  - `months`: pass
            is valid for a specified number of months. See `unit`.\n"
          type: string
          x-extensible-enum:
          - annual
          - extendedAnnual
          - minutes
          - days
          - months
        count:
          description: Required if period is `minutes`, days` or `months`, it specifies
            how many of these units are covered by the pass.
          type: integer
      required:
      - period
    FareReason:
      description: "Extensible enum: `ride` `parking` `...`  \nReason for the cost
        described in this `Fare` element.\n"
      type: string
      x-extensible-enum:
      - ride
      - parking
    FuelType:
      description: "Extensible enum: `diesel` `petrol` `lpg` `cng` `...`  \nVehicle
        fuel type. It is mandatory for calculation of consumption and CO2 emission.\n*
        `diesel`: Diesel. Emission is 2.64 kg of CO2 from each combusted liter of
        fuel.\n* `petrol`: Petrol/gasoline. Emission is 2.392 kg of CO2 from each
        combusted liter of fuel.\n* `lpg`: LPG. Emission is 1.665 kg of CO2 from each
        combusted liter of fuel.\n* `cng`: CNG(L-gas or Low calorific). Emission is
        2.252 kg of CO2 from each combusted kilogram of fuel.\n"
      type: string
      x-extensible-enum:
      - diesel
      - petrol
      - lpg
      - cng
    FunctionalClass:
      description: |
        Functional class defines a hierarchical network used to determine a logical and efficient route. The following classifications are used:

        * `1`: Roads that allow for high volume, maximum speed traffic movement between and through major metropolitan areas.
        * `2`: Roads that are used to channel traffic to functional class 1 roads for travel between and through cities in the shortest amount of time.
        * `3`: Roads that intersect functional class 2 roads and provide a high volume of traffic movement at a lower level of mobility than functional class 2 roads.
        * `4`: Roads that provide for a high volume of traffic movement at moderate speeds between neighborhoods.
        * `5`: Roads with volume and traffic movement below the level of any other functional class.
      type: integer
      format: int32
      minimum: 1
      maximum: 5
    Gate:
      description: "Extensible enum: `keyAccess` `permissionRequired` `emergency`
        `...`  \nType of gate crossing.\n"
      type: string
      x-extensible-enum:
      - keyAccess
      - permissionRequired
      - emergency
    HazardousGoodsRestriction:
      description: "Extensible enum: `explosive` `gas` `flammable` `combustible` `organic`
        `poison` `radioactive` `corrosive` `poisonousInhalation` `harmfulToWater`
        `other` `any` `...`  \nHazardous goods restrictions refer to the limitations
        and regulations imposed on the transportation of specific types of hazardous
        materials during a trip. The following categories of hazardous goods are commonly
        considered:\n\n* `explosive`: Materials that are capable of causing an explosion\n*
        `gas`: Gas (definition varies from country to country). For details, check
        [here](https://en.wikipedia.org/wiki/HAZMAT_Class_2_Gases)\n* `flammable`:
        Materials that are easily ignited and capable of catching fire.\n* `combustible`:
        Materials that have the potential to burn or catch fire.\n* `organic`: Materials
        derived from living organisms or containing carbon compounds.\n* `poison`:
        Substances that can cause harm or death when ingested, inhaled, or absorbed.\n*
        `radioactive`: Materials that emit radiation and pose potential health risks.\n*
        `corrosive`: Substances that can cause damage or destruction through chemical
        reactions.\n* `poisonousInhalation`: Materials that are toxic when inhaled.\n*
        `harmfulToWater`: Materials that can cause pollution or harm to water bodies.\n*
        `other`: Other types of hazardous materials not covered by the above categories\n*
        `any`: Any of the above types of hazardous materials are subject to restrictions
        during the trip.\n"
      type: string
      x-extensible-enum:
      - explosive
      - gas
      - flammable
      - combustible
      - organic
      - poison
      - radioactive
      - corrosive
      - poisonousInhalation
      - harmfulToWater
      - other
      - any
    LineString:
      description: GeoJSON encoding of type 'LineString'
      type: object
      properties:
        type:
          type: string
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: number
              format: double
      required:
      - coordinates
      example:
        value:
          type: LineString
          coordinates:
          - - 52.0
            - 13.0
          - - 52.01
            - 13.01
    LocalizedString:
      description: String with optional language code.
      properties:
        value:
          description: String written in the language specified in the language property.
          type: string
        language:
          description: Language in BCP47 format
          type: string
      required:
      - value
      example:
        value: InvalidenstraÃe
        language: de
    Location:
      description: Location on the Earth
      properties:
        lat:
          description: Location of a point on the Earth north or south of the equator
            in decimal degrees.
          type: number
          format: double
          example: 52.531677
        lng:
          description: Location of a place on the Earth east or west of the prime
            meridian in decimal degrees.
          type: number
          format: double
          example: 13.381777
        elv:
          description: |
            Ellipsoid(geodetic) height in meters. Difference between the WGS84 ellipsoid and a point on the Earthâs surface.
            Note: Similar elevation can be obtained from a GPS receiver.
          type: number
          example: 512.5
      example:
        lat: 52.531677
        lng: 13.381777
      required:
      - lat
      - lng
    MatchTracePoint:
      description: GPS probe point with parameters relevant to path or route matching
      properties:
        lat:
          description: Latitude in degrees
          type: number
          format: double
        lng:
          description: Longitude in degrees
          type: number
          format: double
      required:
      - lat
      - lng
    MaxSpeed:
      description: Speed in meters per second, or "unlimited" indicating that the
        speed is unlimited, e.g., on a German autobahn
      oneOf:
      - type: number
        minimum: 0
      - type: string
        enum:
        - unlimited
    MaxSpeedOnSegment:
      type: string
      description: |
        A comma separated list of segments with restrictions on maximum baseSpeed.

        Each entry has the following structure:
        `{segmentId}(#{direction})?;speed={maxBaseSpeed}`

        The individual parts are:
        * segmentId: The identifier of the referenced topology segment inside the catalog, example: `here:cm:segment:207551710`
        * direction (optional): Either '*' for bidirectional (default), '+' for positive direction, or '-' for negative direction
        * maxBaseSpeed: New value in m/s of baseSpeed on segment

        Example of a parameter value excluding two segments:
        `here:cm:segment:207551710#+;speed=10,here:cm:segment:76771992;speed=1`

        **Notes**:
        - It does not increase default baseSpeed on segment. If the value is greater than the default base speed, then such penalty will have no effect.
        - Minimum valid value for speed is 1
        - Using segments with a modified base speed does not trigger any notifications
        - Maximum amount of penalized segments in one request cannot be greater than 250.
          A "penalized segments" refers to segments that have a restrictions on maximum baseSpeed with `maxSpeedOnSegment`
          or avoided with `avoid[segments]`
    MaxSpeedOnSegmentPost:
      type: array
      items:
        type: object
        properties:
          segment:
            type: string
            description: |
              Identifier of the segment with restrictions on maximum `baseSpeed`.

              Each entry has the following structure:
              `{segmentId}(#{direction})?`
          speed:
            type: number
            minimum: 1
            maximum: 69.99
            description: 'Maximum `baseSpeed` on segment in m/s.

'
      description: |
        Segments with restrictions on maximum `baseSpeed`.

        For the general description of the functionality please refer to the `maxSpeedOnSegment` parameter of the
        query string.

        Passing parameters in the POST body is suggested when the length of the parameters exceeds the
        limitation of the GET request.

        Example of a parameter value excluding two segments:
        ```
        [
          {
            "segment": "here:cm:segment:207551710#+",
            "speed": 10
          },
          {
            "segment": "here:cm:segment:76771992",
            "speed": 1
          }
        ]
        ```

        **Notes**: Maximum amount of penalized segments in one request cannot be greater than 250.
          A "penalized segments" refers to segments that have a restrictions on maximum baseSpeed with `maxSpeedOnSegment`
          or avoided with `avoid[segments]`
    NoticeSeverity:
      description: |
        Describes the impact a notice has on the resource to which the notice is attached.
        * critical - The notice must not be ignored, even if the type of notice is not known to the user. Any associated resource (e.g., route section) must not be used without further evaluation.
        * info - The notice is for informative purposes, but does not affect usability of the route.
      type: string
      enum:
      - critical
      - info
    ParkingLotPlaceType:
      description: "Extensible enum: `parkAndRide` `...`  \nCurrently possible values
        are:\n\n* `parkAndRide` - this parking lot is of type \"Park and Ride\",\n
        \ such as it is a parking specifically designed to allow transition between
        car and transit.\n"
      type: string
      x-extensible-enum:
      - parkAndRide
    PartialTime:
      type: string
      description: "**RFC 3339**, section 5.6 as defined by `partial-time`."
      pattern: "^[012]\\d:[0-5]\\d:[0-6]\\d(\\.\\d+)?$"
      example: 30600
    PaymentMethod:
      description: "Extensible enum: `cash` `bankCard` `creditCard` `passSubscription`
        `transponder` `videoToll` `cashExact` `travelCard` `...`  \nRecognized methods
        of payment.\n"
      type: string
      x-extensible-enum:
      - cash
      - bankCard
      - creditCard
      - passSubscription
      - transponder
      - videoToll
      - cashExact
      - travelCard
    PedestrianSpeed:
      description: Pedestrian speed in meters per second
      type: number
      minimum: 0.5
      maximum: 2
      default: 1
    Polyline:
      type: string
      description: Line string in [Flexible Polyline](https://github.com/heremaps/flexible-polyline)
        format.
      example: A05xgKuy2xCx9B7vUl0OhnR54EqSzpEl-HxjD3pBiGnyGi2CvwFsgD3nD4vB6e
    RailwayCrossing:
      description: "Extensible enum: `protected` `unprotected` `...`  \nType of railway
        crossing.\n"
      type: string
      x-extensible-enum:
      - protected
      - unprotected
    RefReplacements:
      description: 'Dictionary of placeholders to replacement strings for the compact
        representation of map entity references.

'
      type: object
      additionalProperties:
        type: string
    ReroutingMode:
      description: |
        Defines what kind of additional route calculation should be done.

        * `none` - Cuts off route before the current position. Updates dynamic attributes of the
        route after the current position. If the current position, i.e., the new `origin`, is defined and is
        outside of the original route then the request will fail. If both `origin` and
        `lastTraveledSectionIndex` or `traveledDistanceOnLastSection` are provided then
        `lastTraveledSectionIndex` and `traveledDistanceOnLastSection` will be applied first, and
        then `origin` will be matched to the part of the route that's left. This is the default behavior.
        * `returnToRoute` - Same as `none` if current position is on the route. If the current
        position is not on the original route then a new route to the destination will be
        calculated, starting from the current position. The new route will try to preserve the shape
        of the original route, if possible. If a new optimal route is found before a route back to
        the original route then the new route will be returned.
      type: string
      enum:
      - none
      - returnToRoute
    Return:
      description: |
        Defines which attributes are included in the response as part of data representation of a
        `Route` or `Section`.

        * `polyline` - Polyline for the route in [Flexible Polyline](https://github.com/heremaps/flexible-polyline) Encoding.
           Either a 2D polyline (without `elevation` specified), or a 3D polyline with the 3rd dimension type `Elevation` (with `elevation` specified).
        * `actions` - Actions (such as maneuvers or tasks) that must be taken to complete the section.
        * `instructions` - Include instructions in returned actions. Instructions are localized to the requested language.
        * `summary` - Include summary for the section.
        * `travelSummary` - Include summary for the travel portion of the section.
        * `turnByTurnActions` - Include all information necessary to support turn by turn guidance to complete the section.
        * `mlDuration` - Use a region-specific machine learning model to calculate route duration.
           **Disclaimer: This parameter is currently in beta release, and is therefore subject to breaking changes.**
        * `typicalDuration` - Include route duration under typical traffic conditions.
        * `elevation` - Include elevation information in coordinate and geometry types. See e.g. `polyline` or `location`.
        * `routeHandle` - Encode calculated route and return a handle which can be used with
          `routes/{routeHandle}` to decode the route at a later point in time.
        * `passthrough` - Include information on passthrough via waypoints in the section.
        * `incidents` - Include a list of all incidents applicable to each section.
           Incidents are localized to the requested language.
           This requires `incidents` to be specified as part of the `return` parameter.
        * `routingZones` - Include information about routing zones each section goes through.
        * `truckRoadTypes` - Include information about road types each section goes through.
        * `tolls` - Include information about the tolls to be paid, per section, according to the `tolls` parameter and other toll-influencing
          parameters such as vehicle dimensions in the query,
          e.g `transportMode`, `vehicle[hovOccupancy]`, truck[height]. The full list of toll-related attributes is available in the
          [Tolls](https://developer.here.com/documentation/routing-api/dev_guide/topics/use-cases/tolls.html) page of the Developer Guide
          If tolls cannot be calculated for a section, it will contain the `tollsDataUnavailable` notice code.
          **Note**: some toll-related options such as cars with trailers, or vehicle fuel related tolls are planned but not implemented at the moment.
          Therefore the request will return the most "typical" toll cost.
        * `routeLabels` - Include a list of the most important names and route numbers on this route that differentiate it from other alternatives
        The following restrictions apply when specifying the `return` parameter:

        * If `actions` is requested, then `polyline` must also be requested as well.
        * If `instructions` is requested, then `actions` must also be requested as well.
        * If `turnByTurnActions` is requested, then `polyline` must also be requested as well.
        * If at least one attribute is requested within the `spans` parameter, then `polyline` must be request as well
      type: string
      enum:
      - polyline
      - actions
      - instructions
      - summary
      - travelSummary
      - mlDuration
      - typicalDuration
      - turnByTurnActions
      - elevation
      - routeHandle
      - passthrough
      - incidents
      - routingZones
      - truckRoadTypes
      - tolls
      - routeLabels
    RoadInfoType:
      description: Type of the road (rural, urban, highway)
      type: string
      enum:
      - rural
      - urban
      - highway
      default: urban
    RoundaboutAngle:
      description: |
        The degree measure of the arc traversed from the roundabout entrance to the exit of the maneuver.

        Available only for exit roundabout actions. Positive values indicate an exit angle
        for a right-hand side driving roundabout and negative values indicate an exit angle
        for a left-hand side driving roundabout.
      type: number
      format: double
      minimum: -360
      maximum: 360
      example: 204.83
    RouterMode:
      description: Mode of transport to be used for route calculation.
      type: string
      enum:
      - car
      - truck
      - pedestrian
      - bicycle
      - scooter
      - taxi
      - bus
      - privateBus
    RoutingMode:
      description: |
        Specifies which optimization is applied during route calculation.

        * `fast`: Route calculation from start to destination optimized by travel time. In many
          cases, the route returned by the `fast` mode may not be the route with the fastest
          possible travel time. For example, the routing service may favor a route that remains on
          a highway, even if a faster travel time can be achieved by taking a detour or shortcut
          through an inconvenient side road.
        * `short`: Route calculation from start to destination disregarding any speed information.
          In this mode, the distance of the route is minimized, while keeping the route sensible.
          This includes, for example, penalizing turns. Because of that, the resulting route will
          not necessarily be the one with minimal distance.

        Notes:
        * The following Transport modes only support `fast` routingMode
          - `bicycle`
          - `bus`
          - `pedestrian`
          - `privateBus`
          - `scooter`
          - `taxi`
      type: string
      enum:
      - fast
      - short
      default: fast
    RoutingZoneReference:
      description: |
        A reference to a routing zone in HMC.

        The standard representation of a routing zone reference has the following structure:
        `{catalogHrn}:{catalogVersion}:({layerId})?:{tileId}:{zoneId}`

        The individual parts are:
        * `catalogHrn`: The HERE Resource Name that identifies the source catalog of the routing zone, example: `hrn:here:data::olp-here:rib-2`
        * `catalogVersion`: The catalog version
        * `layerId` (optional): The layer inside the catalog where the routing zone is located, example: `environmental-zones`
        * `tileId`: The HERE tile key of the partition/tile where the routing zone is located in the given version of the catalog
        * `zoneId`: The identifier of the referenced routing zone within the catalog, example: `here:cm:envzone:3455277`

        Example of a reference to an environmental zone in standard form:
        `hrn:here:data::olp-here:rib-2:1557:environmental-zones:all:here:cm:envzone:3455277`

        In order to reduce response size, routing zone references can also be provided in a compact representation.
        In compact form, parts of a reference are replaced by placeholders, which can be resolved using the `refReplacements` dictionary in the parent section.
        The placeholder format is ```\$\d+``` and needs to be surrounded by colons or string start/end. It can be captured with the following regular expression: ```(^|:)\$\d+(:|$)``` .

        Example of the aforementioned environmental zone reference in compact form: `$0:$1:3455277`
        With the corresponding `refReplacements`:
        ```
        "refReplacements": {
          "0": "hrn:here:data::olp-here:rib-2:1557",
          "1": "environmental-zones:all:here:cm:envzone"
        }
        ```
      type: string
    Scooter:
      type: object
      description: Scooter-specific parameters
      properties:
        allowHighway:
          description: Specifies whether the scooter is allowed on the highway or
            not. This parameter is optional. If not provided, the scooter is not allowed
            to use the highway by default. There is a similar parameter avoid[features]=controlledAccessHighway
            to disallow highway usage. avoid[features] takes precedence, so if this
            parameter is also used, scooters are not allowed to use highways even
            if `allowHighway` is set to `true`.
          type: boolean
          default: false
    SegmentRef:
      description: |
        A reference to the HMC topology segment used in this span.

        The standard representation of a segment reference has the following structure:
        {catalogHrn}:{catalogVersion}:({layerId})?:{tileId}:{segmentId}(#{direction}({startOffset}..{endOffset})?)?

        The individual parts are:
        * catalogHrn: The HERE Resource Name that identifies the source catalog of the segment, example: hrn:here:data::olp-here:rib-2
        * catalogVersion: The catalog version
        * layerId (optional): The layer inside the catalog where the segment can be found, example: topology-geometry
        * tileId: The HERE tile key of the partition/tile where the segment is located in the given version of the catalog. This can be on a lower level than the actual segment is stored at (for example, the provided tile ID can be on level 14, despite topology-geometry partitions being tiled at level 12). The level of a HERE tile key is indicated by the position of the highest set bit in binary representation. Since the HERE tile key represents a morton code of the x and y portion of the Tile ID, the level 12 tile ID can be retrieved from the level 14 tile ID by removing the 4 least significant bits (or 2 bits per level) or 1 hexadecimal digit. For example, the level 14 tile 377894441 is included in the level 12 tile 23618402 (377894441<sub>10</sub> = 16863629<sub>16</sub> &rightarrow; 1686362<sub>16</sub> = 23618402<sub>10</sub>)
        * segmentId: The identifier of the referenced topology segment inside the catalog, example: here:cm:segment:84905195
        * direction (optional): Either '*' for undirected or bidirectional, '+' for positive direction, '-' for negative direction, or '?' for unknown direction (not used by the routing service)
        * startOffset/endOffset (optional): The start- and end offset are non-negative numbers between 0 and 1, representing the start and end of the referenced range using a proportion of the length of the segment. 0 represents the start and 1 the end of the segment, relative to the indicated direction (or positive direction in case of undirected segments). Example: 0.7..1

        Example of a segment reference in standard representation:
        hrn:here:data::olp-here:rib-2:1363::377894441:here:cm:segment:84905195#+0.7..1

        The segment references can also be provided in a compact representation, to reduce the response size. In the compact representation, some parts are replaced by placeholders, which can be resolved using the refReplacements dictionary in the parent section.
        The placeholder format is ```\$\d+``` and needs to be surrounded by colons or string start/end. It can be captured with the following regular expression: ```(^|:)\$\d+(:|$)/``` .

        Example of the segment reference previously mentioned in compact representation:
        $0:377894441:$1:84905195#+0.7..1
        With the corresponding refReplacements:
        "refReplacements": {
          "0": "hrn:here:data::olp-here:rib-2:1363:",
          "1": "here:cm:segment"
        }
      type: string
    Spans:
      type: string
      enum:
      - walkAttributes
      - streetAttributes
      - carAttributes
      - truckAttributes
      - scooterAttributes
      - names
      - length
      - duration
      - baseDuration
      - typicalDuration
      - countryCode
      - stateCode
      - functionalClass
      - routeNumbers
      - speedLimit
      - maxSpeed
      - dynamicSpeedInfo
      - segmentId
      - segmentRef
      - consumption
      - routingZones
      - truckRoadTypes
      - notices
      - incidents
      - tollSystems
      - gates
      - railwayCrossings
    Speed:
      description: Speed in meters per second
      type: number
      minimum: 0
    StateCode:
      description: |
        ISO-3166-2 code.
        Used for identifying the principal subdivisions (e.g., provinces or states) of a country with some `CountryCode`.
        Made of up to three alphanumeric characters.

        Preferably used in conjunction with the `CountryCode`.
        State code is available in the following countries:
          - USA
          - Canada
          - Australia
          - China
          - India
      type: string
    StreetAttributes:
      description: "Extensible enum: `rightDrivingSide` `dirtRoad` `tunnel` `bridge`
        `ramp` `controlledAccess` `roundabout` `underConstruction` `dividedRoad` `privateRoad`
        `builtUpArea` `...`  \n`StreetAttributes` is applied to a span of a route
        section and describes attribute flags of a street.\n* `rightDrivingSide`:
        Do vehicles have to drive on the right-hand side of the road or the left-hand
        side.\n* `dirtRoad`: This part of the route has an un-paved surface.\n* `tunnel`:
        This part of the route is a tunnel.\n* `bridge`: This part of the route is
        a bridge.\n* `ramp`: This part of the route is a ramp (usually connecting
        to/from/between highways).\n* `motorway`: This part of the route is a controlled
        access road (usually highways with motorway sign).\n* `roundabout`: This part
        of the route is a roundabout.\n* `underConstruction`: This part of the route
        is under construction.\n* `dividedRoad`: This part of the route uses a road
        with a physical or legal divider in the middle.\n* `privateRoad`: This part
        of the route uses a privately owned road.\n* `controlledAccessHighway`: This
        part of the route is a either controlled access or limited access road or
        both.\n* `builtUpArea`: This part of the route most likely passes through
        a built-up area.\n\nAs it is possible that new street attributes are supported
        in the future, unknown street attributes should be ignored.\n"
      type: string
      x-extensible-enum:
      - rightDrivingSide
      - dirtRoad
      - tunnel
      - bridge
      - ramp
      - controlledAccess
      - roundabout
      - underConstruction
      - dividedRoad
      - privateRoad
      - builtUpArea
    Taxi:
      type: object
      description: Taxi-specific parameters
      properties:
        allowDriveThroughTaxiRoads:
          description: |
            Specifies if a vehicle is allowed to drive through taxi-only roads and lanes. Even if
            this option is set to `false`, the vehicle is still allowed on taxi-only roads at the
            start of the route and at the destination.

            **Disclaimer**: This parameter is currently provided as Beta with limited functionality.
          type: boolean
          default: true
    Time:
      type: string
      description: "**RFC 3339**, section 5.6 as defined by either `date-time` or
        `date-only` 'T' `partial-time` (ie no time-offset)."
      format: date-time
    TimeDomain:
      description: |
        Specifies date and time period during which the restriction applies. Value is a string in the Time
        Domain format. Time Domain is part of the GDF (Geographic Data Files) specification, which is an ISO standard.
        Current standard is GDF 5.1 which is [ISO 20524-1:2020](https://www.iso.org/standard/68244.html).

        For a detailed description of the Time Domain specification and usage in routing services, please refer to
        the documentation available in the [Time Domain](https://developer.here.com/documentation/routing-api/dev_guide/topics/time-domain.html) page of the Developer Guide.
      type: string
      example: "-(d1){w1}(d3){d1}"
    TimeRestrictedWeekdays:
      type: string
      enum:
      - mo
      - tu
      - we
      - th
      - fr
      - sa
      - su
    TimeWithAny:
      type: string
      description: |
        Specifies the time either as

        * "**RFC 3339**, section 5.6 as defined by either `date-time` or `date-only` 'T'
        `partial-time` (ie no time-offset)", or
        * the special value `any` which stand for unspecified time
    TollSystem:
      description: 'Information about a toll system collecting payments on the route.

'
      properties:
        name:
          description: 'The name of this toll system

'
          type: string
        id:
          description: 'The internal identification of this toll system. It will be
            replaced in the future by an HRN (HERE Resource Name) identifier.

'
          type: string
    Tolls:
      type: object
      description: |
        Vehicle-independent options that may affect route toll calculation as well as options
        affecting the output of the tolls, such as summaries.

        Since this parameter controls behaviour related to tolls in the return part of the response,
        use of this parameter requires `return=tolls` to be selected.
      properties:
        transponders:
          description: |
            This parameter allows the user to specify for which systems the user has valid transponders.
            If a toll requires a certain transponder and the user states they have that transponder,
            no notices will be given regarding the requirement to have it.
            Additionally, the price for payment with transponders will be used when reporting fare prices
            and summaries, if required by the `tolls[summaries]` parameter.

            The value of the parameter is a comma-separated list of transponder systems that the user has. Alternatively,
            the user can also specify `all` as a list element to state they have all required transponders along any potential route.

            **Note**: currently, the only valid value is `all`.
          type: string
        vignettes:
          description: |
            This parameter allows the user to specify for which toll roads the user has valid vignettes.
            If a road requires a certain vignette and the user states that they have it, no notices will be
            given regarding the requirement to have it.

            The value of the parameter is a comma-separated list of vignettes that the user has. Alternatively,
            the user can also specify `all` as a list element to state they have all required vignettes along any potential route.

            No toll costs information will be returned for a given road requiring a vignette if the user states
            they already have it, as no further payment is necessary. If `tolls` are requested for spans, the toll
            sections for these types of toll systems are still reported, nevertheless.

            **Note**: currently, the only valid value is `all`.
          type: string
        summaries:
          description: "Items extensible enum: `total` `tollSystem` `country` `...`
            \ \nThis parameter allows the user to specify criteria for tolls aggregation.\nMultiple
            values may be requested at once.\nToll aggregation is performed at the
            section level only.\n\nPossible values are:\n  - `total`: the user wants
            a single value summarizing the tolls to be paid in the section.\n    This
            summary criterion requires that a `currency` has been passed as a parameter,
            to group\n    multi-currency roads together, even if the route would traverse
            roads that use only one currency;\n    see `currency` parameter.\n  -
            `tollSystem`: toll costs are aggregated per toll system.\n  - `country`:
            toll costs are aggregated per country.\n\nNote that any toll instance
            may have multiple prices, depending on factors such as time of day,\npayment
            methods, etc. that are not available in the request. As a result,\nthe
            most economical value is selected for summary calculation, so summaries
            should be considered\ninformative only.\n"
          type: array
          items:
            type: string
            x-extensible-enum:
            - total
            - tollSystem
            - country
        vehicleCategory:
          type: string
          description: "Extensible enum: `minibus` `...`  \nDefines special toll vehicle
            types. Usual types like car or truck are determined from transport mode.\n\n|
            category  | Description |\n| --------- | ------- |\n| minibus | Commercial
            buses with a seating capacity of 16-25 passengers (NA) or a small bus
            that is used to transport a maximum of 15 passengers. Can be used only
            with transport mode `car` |\n\n**NOTE:** It can be extended by other vehicle
            categories in the future.\n"
          x-extensible-enum:
          - minibus
        emissionType:
          type: string
          description: "Extensible enum: `euro1` `euro2` `euro3` `euro4` `euro5` `euro6`
            `euroEev` `...`  \nDefines the emission classes as defined by the toll
            operator. The types defined are based on the Emission standards. Emission
            types are only published when the toll cost is defined based on emission
            classes.\n\n**NOTE:** This parameter is not compatible with EV routing:
            When EV routing is used, the appropriate emission type (Electric Vehicle)
            is used.\n"
          x-extensible-enum:
          - euro1
          - euro2
          - euro3
          - euro4
          - euro5
          - euro6
          - euroEev
    Traffic:
      type: object
      description: Traffic specific parameters.
      properties:
        overrideFlowDuration:
          description: |
            Duration in seconds for which flow traffic event would be considered valid. While flow
            traffic event is valid it will be used over the historical traffic data.

            **Note**: Flow traffic represents congestion not caused by any long-term incidents.
            State of the flow traffic often changes fast. The farther away from the current time we
            move, the less precise current flow traffic data will be and the more precise historical
            traffic data becomes. That's why it's advised not to use this parameter unless you know
            what you want to achieve and use the default behavior which is almost always better.
          type: integer
        mode:
          description: |
            Defines what traffic data should be used for route shape and travel duration calculation.

            * `default`: Traffic data is considered.
            *    - If `departureTime=any` then only long-term closures will be considered.
            *    - If `departureTime` is not equal to `any` then all traffic data will be taken into account.
            * `disabled`: All traffic data, including long term closures, is ignored.
          type: string
          default: default
          enum:
          - default
          - disabled
    TrafficIncidentCriticality:
      description: |
        Describes the impact an incident has on the route.
        * critical - The part of the route the incident affects is not usable.
        * major - Major impact on duration, e.g. stop and go
        * minor - Minor impact on duration, e.g. traffic jam
        * low - Very little impact on duration, e.g. slightly increased traffic
      type: string
      enum:
      - critical
      - major
      - minor
      - low
    TrafficIncidentType:
      description: "Extensible enum: `accident` `congestion` `construction` `disabledVehicle`
        `massTransit` `plannedEvent` `roadHazard` `roadClosure` `weather` `laneRestriction`
        `other` `...`  \nAn open list of possible incident causes / types.\nNote:
        Since new types are expected to appear, it is important to check for unknown
        types when parsing this value.\n"
      type: string
      x-extensible-enum:
      - accident
      - congestion
      - construction
      - disabledVehicle
      - massTransit
      - plannedEvent
      - roadHazard
      - roadClosure
      - weather
      - laneRestriction
      - other
    TrailerCountRange:
      description: Constrains the restriction to vehicles with the number of trailers
        within the specified range.
      properties:
        from:
          description: Inclusive minimum of trailer count.
          type: integer
          format: int32
          minimum: 0
        to:
          description: Inclusive maximum of trailer count. If not set, the maximum
            trailer count is unbounded.
          type: integer
          format: int32
          minimum: 0
    TransitIncidentEffect:
      description: "Extensible enum: `cancelledService` `reducedService` `additionalService`
        `modifiedService` `delays` `detour` `stopMoved` `other` `...`  \nAn open list
        of possible incident effects.\nNote: Since new types are expected to appear,
        it is important to check for unknown types when parsing this value.\n"
      type: string
      x-extensible-enum:
      - cancelledService
      - reducedService
      - additionalService
      - modifiedService
      - delays
      - detour
      - stopMoved
      - other
    TransitIncidentType:
      description: "Extensible enum: `technicalProblem` `strike` `demonstration` `accident`
        `holiday` `weather` `maintenance` `construction` `policeActivity` `medicalEmergency`
        `other` `...`  \nAn open list of possible incident causes / types.\nNote:
        Since new types are expected to appear, it is important to check for unknown
        types when parsing this value.\n"
      type: string
      x-extensible-enum:
      - technicalProblem
      - strike
      - demonstration
      - accident
      - holiday
      - weather
      - maintenance
      - construction
      - policeActivity
      - medicalEmergency
      - other
    TransitStopAttributes:
      description: "Extensible enum: `noEntry` `noExit` `...`  \nAttributes of a stop.\n\n*
        `noEntry`: The transport cannot be entered at the stop.\n* `noExit`: The transport
        cannot be exited at the stop.\n"
      type: string
      x-extensible-enum:
      - noEntry
      - noExit
    TruckAxleCountRange:
      description: Constrains the restriction to trucks with the number of axles within
        the specified range.
      properties:
        from:
          description: Inclusive minimum of axle count.
          type: integer
          format: int32
          minimum: 2
        to:
          description: Inclusive maximum of axle count. If not set, the maximum axle
            count is unbounded.
          type: integer
          format: int32
          minimum: 2
    TruckType:
      description: |
        Specifies the type of the truck

        * `straight`: A truck on a single frame with a permanently attached cargo area.
        * `tractor`: A towing vehicle that can pull one or more semi-trailers (also known as a semi-truck).
      deprecated: true
      type: string
      enum:
      - straight
      - tractor
    TunnelCategory:
      description: |
        Specifies the tunnel category used to restrict the transport of specific goods.

        **Limitations:** only valid for `transportMode=truck`.
      type: string
      enum:
      - B
      - C
      - D
      - E
    TurnActionDirection:
      description: Direction of the turn. `middle` is only used by the `keep` action.
      type: string
      enum:
      - middle
      - right
      - left
    TurnActionSeverity:
      description: |
        Tightness of the turn. Optional in the `turn` action, unused by other actions.

        * `light`: indicates making a light turn
        * `quite`: indicates making a regular turn
        * `heavy`: indicates making a heavy turn
      type: string
      enum:
      - light
      - quite
      - heavy
    TurnAngle:
      description: |
        The angle of the turn expressed in degrees.

        It is available only for turn-by-turn actions. A positive number indicates a clockwise angle.
      type: number
      format: double
      minimum: -180
      maximum: 180
      example: -132.28
    Units:
      description: Units of measurement used, for example, in guidance instructions.
        The default is `metric`.
      type: string
      enum:
      - metric
      - imperial
    Uri:
      description: An URL address that links to a particular resource.
      type: string
      format: uri
      example: https://url.address.com/resource
    VehicleType:
      description: |
        Specifies the type of the vehicle

        * `straightTruck`: A truck on a single frame with a permanently attached cargo area. **Note:**
        default value when truck routing mode is used. **Limitations:** only valid for `transportMode=truck`.
        * `tractor`: A towing vehicle that can pull one or more semi-trailers (also known as a semi-truck).
        **Limitations:** only valid for `transportMode=truck`.
      type: string
      enum:
      - straightTruck
      - tractor
    WalkAttributes:
      description: "Extensible enum: `stairs` `park` `indoor` `open` `noThrough` `tollRoad`
        `...`  \nWalkAttributes are applied to a span of a route section and describe
        walk-related attribute\nflags.\n\n* `stairs`: This part of the route is using
        stairs.\n* `park`: This part of the route is located inside a park.\n* `indoor`:
        This part of the route is located inside a venue.\n* `open`: This part of
        the route is open to walking.\n* `noThrough`: This part of the route can only
        be traversed if origin, destination or any via waypoint is located there.\n*
        `tollRoad`: This part of the route is restricted with a fee (or toll).\n"
      type: string
      x-extensible-enum:
      - stairs
      - park
      - indoor
      - open
      - noThrough
      - tollRoad
    Waypoint:
      description: |
        A location defining an origin, destination or via point for a route or an isoline.

        Format: `Place[WaypointOptions]`

        * Place: `{lat},{lng}[PlaceOptions]`
        * PlaceOptions: `;option1=value1;option2=value2...`
        * WaypointOptions: `!option1=value1!option2=value2...`

        A waypoint consists of:
        * Exactly one place
        * Optional settings for the place
        * Optional settings for the waypoint itself

        Supported place options:
        * `course`: int, degrees clock-wise from north. Indicates the desired direction from the place. For example, `90` indicating `east`. Often combined with `radius` and/or `minCourseDistance`. This parameter takes preference over `matchSideOfStreet`.
        * `sideOfStreetHint`: `{lat},{lng}`. Indicates the side of the street that should be used. For example, if the location is to the left of the street, the router will prefer using that side in case the street has dividers. For example, `52.511496,13.304140;sideOfStreetHint=52.512149,13.304076` indicates that the `north` side of the street should be preferred. This options is required, if `matchSideOfStreet` is set to `always`.
        * `matchSideOfStreet`: enum `[always, onlyIfDivided]`. Specifies how the location set by `sideOfStreetHint` should be handled. Requires `sideOfStreetHint` to be specified as well. Note the exception above when combined with `course`.
          + `always` : Always prefer the given side of street.
          + `onlyIfDivided`: Only prefer using side of street set by `sideOfStreetHint` in case the street has dividers. This is the default behavior.
        * `nameHint`: string. Causes the router to look for the place with the most similar name. The typical examples include: `North` being used to differentiate between interstates `I66 North` and `I66 South`, `Downtown Avenue` being used to correctly select a residental street.
        * `radius`: int, meters. Instructs the router to consider all places within the given radius as potential candidates for matching the waypoint. This can be either because it is not important which place is used, or because it is unknown. Values higher than 200 meters are not supported. Option cannot be combined with `snapRadius`.
        * `snapRadius`: int, meters. Instructs the router to match the waypoint, within the specified radius, to the most "significant" road. In contrast to the regular `radius` parameter, `snapRadius` sorts potential candidates in order of "significance". For example, a highway is more significant on a zoomed-out map than a national road, a national road is more significant than a city road, etc. Hence, `snapRadius` cannot be combined with `radius` parameter. The typical use case for `snapRadius` is when selecting a waypoint on a zoomed-out view of a map on a drag-and-drop interface. The expectation on such UIs is that only roads that are visible at that zoom level are considered for matching and a large snapRadius would enable that.
        * `radiusPenalty`: int, percentage 0-1000. Used in conjunction of `radius` parameter. Router will match the waypoint, within the specified radius and penalize candidates according to air distance to the waypoint. Penalty is proportional to given percentage, 100 being just cost of air distance and 200 double. Currently works only for pedestrian/bicycle routes. **Alpha**: This parameter is in development. It may not be stable and is subject to change.

        * `minCourseDistance`: int, meters. Instructs the routing service to try to find a route that avoids actions for the indicated distance. For example, if the origin is determined by a moving vehicle, the user might not have time to react to early actions.
        * `segmentIdHint`: string. Causes the router to try and match to the specified segment. Waypoint coordinates need to be on the segment, otherwise waypoint will be matched ignoring the segment hint. This parameter can be used when the waypoint is too close to more than one segment to force matching to a specific one.
        * `onRoadThreshold`: int, meters. allows specifying a distance within which the waypoint could be considered as being on a highway/bridge/tunnel/sliproad. Within this threshold, the attributes of the segments do not impact the matching. Outside the threshold only segments which aren't one of highway/bridge/tunnel/sliproad can be matched.

        Supported waypoint options:
        * `stopDuration`: desired duration for the stop, in seconds.
        * `passThrough`: boolean. Asks the router to avoid the following during route calculation:
          + Introducing a stop at the waypoint.
          + Splitting the route into sections.
          + Changing the direction of travel.

        Following scenarios is not supported for `passThrough` parameter:
          + Setting both `stopDuration` to a value greater than 0 and `passThrough=true`.
          + Setting `passThrough=true` for `origin` or `destination` of a route.
          The default value is `false`.
      type: string
    WeightPerAxleGroup:
      description: |
        Specifies the weights of different axle groups, such as single and tandem axles.

        This allows specification of axle weights in a more fine-grained way than `weightPerAxle`. This
        is relevant in countries with signs and regulations that specify different limits for different
        axle groups, such as the USA and Sweden.

        Format: `AxleGroup:Weight[,AxleGroup2:Weight2]...`

        Currently, allowed axle-groups are:
          * `single`
          * `tandem`
          * `triple`
          * `quad`
          * `quint`

        Weights are specified in kilograms (kg) and represent the total weight of the axle-group.

        **Note:** `weightPerAxleGroup` and `weightPerAxle` are incompatible.
        **Limitations:** only valid for `transportMode=truck`.
      type: string
      example: single:11000,tandem:18000
    WheelchairAccessibility:
      description: |
        Defines accessibility for people with a disability and who use a wheelchair.

        * `unknown` - Information is not available.
        * `yes` - Full unrestricted accessibility.
        * `limited` - Accessibility is limited, not everywhere or require assistance.
        * `no` - No accessibility.
      type: string
      enum:
      - unknown
      - 'yes'
      - limited
      - 'no'
      default: unknown
    Agency:
      description: Contains information about a particular agency.
      properties:
        id:
          description: Unique code of the agency. Specifies if the same agency is
            used on different sections of the same route.
          type: string
        name:
          description: Human readable name of the owner of the transport service.
          type: string
        website:
          description: Link to the agency's website.
          allOf:
          - "$ref": "#/components/schemas/Uri"
      required:
      - id
      - name
    BaseAction:
      description: An action to be performed between sections or during a section.
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
      required:
      - action
      - duration
    BasePlace:
      properties:
        name:
          description: Location name
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
      required:
      - type
      - location
      example:
        type: place
        location:
          lat: 50.339167
          lng: 18.93
    BaseSummary:
      description: Total value of key attributes for a route section.
      properties:
        duration:
          "$ref": "#/components/schemas/Duration"
        length:
          "$ref": "#/components/schemas/Distance"
      required:
      - duration
      - length
    CalculateRoutesPostParameters:
      description: Parameters of the POST body for route calculation
      type: object
      properties:
        avoid:
          "$ref": "#/components/schemas/AvoidPost"
        ev:
          "$ref": "#/components/schemas/EVPost"
        maxSpeedOnSegment:
          "$ref": "#/components/schemas/MaxSpeedOnSegmentPost"
      example:
        "$ref": "#/components/examples/calculateRoutesPostParametersExample"
    ChargingConnectorAttributes:
      description: Details of the connector that is suggested to be used in the section's
        `postAction` for charging.
      properties:
        power:
          description: Power supplied by the suggested connector in kW.
          type: number
        current:
          description: Current of the suggested connector in Amperes.
          type: number
        voltage:
          description: Voltage of the suggested connector in Volts.
          type: number
        supplyType:
          description: 'Supply type of the suggested connector.

'
          allOf:
          - "$ref": "#/components/schemas/ChargingSupplyType"
        connectorType:
          description: Suggested connector for charging at this station
          allOf:
          - "$ref": "#/components/schemas/ChargingConnectorType"
      required:
      - power
      - supplyType
      - connectorType
    DynamicSpeedInfo:
      description: 'Describes dynamic speed information, such as traffic speed, estimated
        speed without traffic, and turn time.

'
      properties:
        trafficSpeed:
          description: |
            Refers to the estimated speed of a vehicle on the road-segment taking into account traffic-related constraints.
            **Note:** Will be the same as `baseSpeed` if `traffic[mode]=disabled` is specified.
          allOf:
          - "$ref": "#/components/schemas/Speed"
        baseSpeed:
          description: Estimated speed without considering any traffic-related constraints.
          allOf:
          - "$ref": "#/components/schemas/Speed"
        turnTime:
          description: 'Estimate of the time it takes to turn from this span into
            the next. It takes into account both traffic conditions and the specific
            transport-mode.

'
          allOf:
          - "$ref": "#/components/schemas/Duration"
      required:
      - trafficSpeed
      - baseSpeed
      - turnTime
    ExitInfo:
      description: Exit information attached to an offset action
      properties:
        number:
          description: Number of the exit (e.g. '18')
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
      example:
        exit:
          number:
          - value: '15'
            language: de
    FarePass:
      description: Specifies whether this `Fare` is a multi-travel pass, and its characteristics
      properties:
        returnJourney:
          description: This pass includes the fare for the return journey.
          type: boolean
        validityPeriod:
          "$ref": "#/components/schemas/FarePassValidityPeriod"
        travels:
          description: This pass allows for the specified number of travels.
          type: integer
        transfers:
          description: Indicates if transfers are permitted with this pass, and if
            so, how many.
          type: integer
        seniorPass:
          description: This pass is valid only if presented by a senior person.
          type: boolean
    GetRoutesByHandlePostParameters:
      description: Parameters of the POST body for get route by handle
      type: object
      properties:
        avoid:
          "$ref": "#/components/schemas/AvoidPost"
        maxSpeedOnSegment:
          "$ref": "#/components/schemas/MaxSpeedOnSegmentPost"
      example:
        "$ref": "#/components/examples/calculateRoutesPostParametersExample"
    HealthResponseFailSchema:
      description: Returns the health of the service
      properties:
        status:
          description: |
            Health status of the service:

            * `ok` - the service is operating normally
            * `fail` - the service is currently encountering a failure
          type: string
          enum:
          - fail
    HealthResponseOKSchema:
      description: Returns the health of the service
      properties:
        status:
          description: |
            Health status of the service:

            * `ok` - the service is operating normally
            * `fail` - the service is currently encountering a failure
          type: string
          enum:
          - ok
    ImportGeoBody:
      discriminator:
        propertyName: type
        mapping:
          LineString: "#/components/schemas/LineString"
      oneOf:
      - "$ref": "#/components/schemas/LineString"
    LocalizedRouteNumber:
      description: Represents a route number in specific language with optional cardinal
        direction and route level.
      example:
        value: US-101
        language: en
        direction: south
        routeType: 1
      properties:
        value:
          description: String written in the language specified in the language property.
          type: string
        language:
          description: Language in BCP47 format
          type: string
        direction:
          description: |
            This property indicates the official directional identifier assigned to highways. Use direction on sign in conjunction with official name or route number.
            For example, for route guidance, use "US-101 S" and not just "US-101" when appropriate.

            Note that the official direction is not necessarily the travel direction. For example, US-101 through the city of Sunnyvale is physically located East to West.
            However, the official direction on sign is North/South.
          type: string
          enum:
          - north
          - south
          - east
          - west
        routeType:
          description: |
            Specifies route type for different route element. These values must be used in conjunction with a separate HERE data product: Country Profile Road Signs.
            One of the usage example for this property is it affects how the road shield will be rendered, i.e.
            this route type might change the shape, color and the font of the road shield.
            Related examples for different countries can be found here: https://en.wikipedia.org/wiki/Highway_shield.
            Possible values are from 1 to 6. But if some countries add extra route type in the future, this range could change as well.
          type: integer
          minimum: 1
          maximum: 6
      required:
      - value
    MatchTraceVia:
      description: Via waypoint in the middle of route
      properties:
        index:
          description: Index of the corresponding trace point
          type: integer
          minimum: 1
        stopDuration:
          description: Desired duration for the stop, in seconds
          allOf:
          - "$ref": "#/components/schemas/Duration"
      required:
      - index
    Notice:
      description: A notice contains important notifications.
      properties:
        title:
          type: string
          description: Human-readable notice description.
          example: No route found
        code:
          type: string
          description: Notice code.
          example: noRouteFound
        severity:
          "$ref": "#/components/schemas/NoticeSeverity"
        details:
          type: array
          description: Additional details about the notice
          items:
            "$ref": "#/components/schemas/BaseNoticeDetail"
      required:
      - code
    PedestrianMode:
      description: "Extensible enum: `pedestrian` `...`  \nPedestrian mode of transport.\n\nSince
        the supported pedestrian modes may be extended in the future, the pedestrian
        mode should be hidden when an unknown mode is encountered.\n"
      type: string
      x-extensible-enum:
      - pedestrian
      default: pedestrian
    Rerouting:
      description: |
        Rerouting parameters allow to request a new route calculation based on the route handle.

        All attributes are optional.
      type: object
      properties:
        mode:
          "$ref": "#/components/schemas/ReroutingMode"
        lastTraveledSectionIndex:
          description: |
            Indicates the index of the last traveled route section. Traveled part of the route won't
            be reused.
          type: integer
          default: 0
        traveledDistanceOnLastSection:
          description: 'Offset in meter to the last visited position on the route
            section defined by the `lastTraveledSectionIndex`.

'
          type: integer
          default: 0
      example:
        "$ref": "#/components/examples/ReroutingExample"
    RoutingErrorResponse:
      description: Response in case of error
      properties:
        title:
          type: string
          description: Human-readable error description
          example: Input data failed validation
        status:
          type: integer
          description: HTTP status code
          example: 400
        code:
          type: string
          description: |
            Machine readable service error code.

            All error codes of this service start with "`E605`". The last three digits describe a specific error. Provide this error code when contacting support.

            **NOTE:** Please note that the list of possible error codes could be extended in the future. The client application is expected to handle such a case gracefully.

            | Code      | Reason  |
            | --------- | ------- |
            | `E60500X` | Malformed query. Typically due to invalid values such as `transportMode=spaceShuttle` or missing required fields. Check the error message for details. |
            | `E605010` | Invalid combination of vehicle options and transport mode. |
            | `E605011` | Invalid combination of avoid feature `difficultTurns` or `uTurns` and transport mode. Check `avoid` for details. |
            | `E605012` | Invalid combination of transport mode and routing mode. Check `routingMode` for a list of supported combinations. |
            | `E605013` | Invalid return options. Check `return` for valid combinations of values. |
            | `E605014` | Invalid language code. Check `lang` for details on how valid language codes look. |
            | `E605015` | Too many alternatives. Check `alternatives` for the maximum number of alternatives allowed. |
            | `E605016` | Invalid exclude countries. Check `exclude` for details. |
            | `E605017` | `spans` contains a value whose dependency has not been requested |
            | `E605018` | Invalid combination of departure and arrival time |
            | `E605019` | `truck[weightPerAxle]` and `truck[weightPerAxleGroup]` are incompatible |
            | `E605020` | Invalid combination of `radius` and `snapRadius`  |
            | `E605021` | Invalid Combination of `vehicle[occupancy]`/`allow[hot]`/`allow[hov]` and `vehicle[hovOccupancy]`  |
            | `E605030` | Invalid EV options. Check `ev` for details. |
            | `E605032` | Invalid transport mode for speed cap, check `vehicle[speedCap]` for details. |
            | `E605033` | Invalid combination of scooter and transport mode. Check `scooter` for valid scooter transport modes. |
            | `E605034` | Invalid Speed Cap, check `vehicle[speedCap]` for details. |
            | `E605035` | MLDuration is not supported with `vehicle[speedCap]` parameter. |
            | `E605036` | Consumption parameters are not supported for combination of EV and Fuel-based vehicle. Check `ev` or `fuel` for details. |
            | `E605037` | Invalid Fuel options. Check `fuel` for details. |
            | `E605040` | Invalid combination of EV and transport mode. Check `ev` for details. |
            | `E605041` | Invalid combination of EV and routing mode. Check `ev` for details. |
            | `E605042` | Invalid combination of EV and alternatives. Check `ev` for details. |
            | `E605043` | Invalid combination of EV and avoid options. Check `ev` for details. |
            | `E605047` | Invalid combination of EV and arrival time. Check `ev` for details. |
            | `E605048` | Invalid combination of avoid feature `difficultTurns` and truck category `lightTruck`. |
            | `E605052` | Invalid number of trace points. Check `MatchTrace` for the minimum and maximum number of trace points allowed. |
            | `E605053` | Invalid Match trace via. Check `via` in `MatchTrace` for valid indexes. |
            | `E605054` | Too many avoid areas. Check `areas` for the maximum number of avoid areas allowed. |
            | `E605055` | Invalid trailer axle count. |
            | `E605056` | Too many avoid polygons. Check `areas[polygon]` for the maximum number of polygons allowed. |
            | `E605057` | Too many vertices in the polygon. Check `areas[polygon]` for the maximum number of vertices allowed. |
            | `E605058` | Not enough vertices in the polygon. Check `areas[polygon]` for the minimum number of vertices allowed. |
            | `E605059` | Polygon is self-intersecting. Check `areas[polygon]`. |
            | `E605075` | Invalid customizationIndex. |
            | `E605101` | Credentials not allowed for calculating routes in Japan. |
            | `E605201` | RouteHandle not valid (anymore). (Re-)calculate route to retrieve new handle. |
            | `E605301` | Pedestrian options are only supported for transport mode `pedestrian`. |
            | `E605302` | Routing zones is not supported for transport mode `pedestrian`. |
            | `E605303` | Avoiding routing zones is not supported for transport mode `pedestrian`. |
            | `E605304` | Avoiding truck road types is not supported for transport mode `pedestrian`. |
            | `E605400` | Customization not supported. |
            | `E6055XX` | Internal server error. |
          example: E605001
        cause:
          type: string
          description: Human-readable explanation for the error
          example: The input data in question does not comply with validation rules
        action:
          type: string
          description: Human-readable description of the action that can be taken
            to correct the error
          example: Request a valid id
        correlationId:
          type: string
          description: Auto-generated id that univocally identifies the request
          example: 4199533b-6290-41db-8d79-edf4f4019a74
      required:
      - title
      - status
      - code
      - cause
      - action
      - correlationId
    RoutingZone:
      description: Information about a routing zone.
      properties:
        ref:
          "$ref": "#/components/schemas/RoutingZoneReference"
        type:
          description: "Extensible enum: `environmental` `vignette` `...`  \nThe type
            of a routing zone.\n"
          type: string
          x-extensible-enum:
          - environmental
          - vignette
        name:
          description: The routing zone's name.
          type: string
    TollCollectionLocation:
      description: |
        Refers to the physical location where the toll is collected. This can include various structures such as toll booths, transponder readers, or number-plate cameras.
        It's important to note that certain toll collection methods, such as vignettes, do not have specific toll collection locations associated with them, and therefore this element
        will not be present at all.

        The value of this property is a `Location` that specifies the coordinates of the payment location.
      properties:
        name:
          description: 'A descriptive name of the location.

'
          type: string
        location:
          "$ref": "#/components/schemas/Location"
      required:
      - location
    TrafficIncident:
      description: |
        An incident describes a temporary event on the road network.
        It typically refers to a real world incident (accident, road construction, weather condition, etc.)
        on a street or street segment
      properties:
        description:
          type: string
          description: A human readable description of the incident
          example: closed due to roadworks
        type:
          "$ref": "#/components/schemas/TrafficIncidentType"
        criticality:
          "$ref": "#/components/schemas/TrafficIncidentCriticality"
        validFrom:
          "$ref": "#/components/schemas/Time"
        validUntil:
          "$ref": "#/components/schemas/Time"
        id:
          description: |
            Traffic Incident unique identifier,

            Example of a incident identifier in standard representation:
            here:traffic:incident:1000155780078589348

            Id usage:
            An incident details can be queried from traffic service later, see
            https://developer.here.com/documentation/traffic-api/dev_guide/topics/use-cases/incidents-by-id.html

            **Notice**:
            In most cases, the ID comes from a third party incident supplier.
            This means that once an incident has expired, the ID might be reused
          type: string
    TransitIncident:
      description: |
        An incident describes disruptions on the transit network.
        Disruptions scale from delays to service cancellations.
      properties:
        summary:
          type: string
          description: A human readable summary of the incident
          example: The subway is closed each night between 1 AM and 5 AM.
        description:
          type: string
          description: A human readable description of the incident
          example: The subway is closed each night between 1 AM and 5 AM while we
            clean our trains and stations. We are running extra bus service overnight.
        type:
          "$ref": "#/components/schemas/TransitIncidentType"
        effect:
          "$ref": "#/components/schemas/TransitIncidentEffect"
        validFrom:
          "$ref": "#/components/schemas/Time"
        validUntil:
          "$ref": "#/components/schemas/Time"
        url:
          description: Link to the original incident published at the agency website
          allOf:
          - "$ref": "#/components/schemas/Uri"
      required:
      - type
      - effect
    TransitMode:
      title: Modes
      description: "Extensible enum: `highSpeedTrain` `intercityTrain` `interRegionalTrain`
        `regionalTrain` `cityTrain` `bus` `ferry` `subway` `lightRail` `privateBus`
        `inclined` `aerial` `busRapid` `monorail` `carShuttleTrain` `flight` `spaceship`
        `...`  \nTransit mode of transport in the route response\n"
      type: string
      x-extensible-enum:
      - highSpeedTrain
      - intercityTrain
      - interRegionalTrain
      - regionalTrain
      - cityTrain
      - bus
      - ferry
      - subway
      - lightRail
      - privateBus
      - inclined
      - aerial
      - busRapid
      - monorail
      - carShuttleTrain
      - flight
      - spaceship
    TruckTypeWithDefault:
      description: |
        Specifies the type of the truck

        * `straight`: A truck on a single frame with a permanently attached cargo area.
        * `tractor`: A towing vehicle that can pull one or more semi-trailers (also known as a semi-truck).
      deprecated: true
      type: string
      enum:
      - straight
      - tractor
      default: straight
    VehicleMode:
      description: "Extensible enum: `car` `truck` `scooter` `...`  \nVehicle mode
        of transport.\n\nSince the supported vehicle modes may be extended in the
        future, the vehicle mode should be hidden when an unknown mode is encountered.\n"
      type: string
      x-extensible-enum:
      - car
      - truck
      - scooter
      default: car
    VehicleRestriction:
      description: |
        Contains details about violated restrictions.

        Certain properties represent conditions to be evaluated, e.g., according to vehicle properties.
        The restriction is violated only if all of the conditions present are met.
      properties:
        title:
          type: string
          description: Detail title
        cause:
          type: string
          description: Cause of the notice
        type:
          type: string
          description: |
            Detail type. Each type of detail might contain extra attributes.

            **NOTE:** The list of possible detail types may be extended in the future.
            The client application is expected to handle such a case gracefully.
        forbiddenHazardousGoods:
          description: |
            Hazardous goods restrictions applied during the trip.

            This condition is met when the vehicle's shippedHazardousGoods
            contains any of the items in the specified array.
          type: array
          items:
            "$ref": "#/components/schemas/HazardousGoodsRestriction"
        maxGrossWeight:
          description: |
            Contains the maximum permitted gross weight, specified in kilograms.

            This condition is met when the vehicle's `grossWeight` exceeds the specified value.
          type: integer
          format: int32
          minimum: 0
        maxWeightPerAxle:
          description: |
            Contains the maximum permitted weight per axle, specified in kilograms.

            This condition is met when the vehicle's `weightPerAxle` exceeds the specified value.
          type: integer
          format: int32
          minimum: 0
        maxAxleGroupWeight:
          description: |
            Contains the maximum permitted weight for an axle-group.

            This condition is triggered when the vehicle's `weightPerAxleGroup` exceeds this value.
          allOf:
          - "$ref": "#/components/schemas/AxleGroupWeight"
        maxHeight:
          description: |
            Contains the maximum permitted height, specified in centimeters.

            This condition is met when the vehicle's `height` exceeds the specified value.
          type: integer
          format: int32
          minimum: 0
        maxWidth:
          description: |
            Contains the maximum permitted width, specified in centimeters.

            This condition is met when the vehicle's `width` exceeds the specified value.
          type: integer
          format: int32
          minimum: 0
        maxLength:
          description: |
            Contains the maximum permitted length, specified in centimeters.

            This condition is met when the vehicle's `length` exceeds the specified value.
          type: integer
          format: int32
          minimum: 0
        axleCount:
          description: |
            Constrains the restriction to trucks with the number of axles within the specified range.

            This condition is met when the vehicle's `axleCount` is within the specified range.
          allOf:
          - "$ref": "#/components/schemas/TruckAxleCountRange"
        tunnelCategory:
          description: |
            Specifies the tunnel category used to restrict the transport of specific goods.

            This condition is met when the value exceeds the tunnel category specified
            by the vehicle's `tunnelCategory`
          allOf:
          - "$ref": "#/components/schemas/TunnelCategory"
        timeDependent:
          description: 'Indicates that the restriction depends on time.

'
          type: boolean
        truckType:
          description: |
            Constrains the restriction to a specific type of vehicle.

            This condition is met if the `vehicle[type]` request parameter matches the specified value.
          deprecated: true
          allOf:
          - "$ref": "#/components/schemas/TruckType"
        vehicleType:
          description: |
            Constrains the restriction to a specific type of vehicle.

            This condition is met if the `vehicle[type]` request parameter matches this value.
          allOf:
          - "$ref": "#/components/schemas/VehicleType"
        trailerCount:
          description: |
            Constrains the restriction to trucks with the number of axles within the specified range.

            This condition is met when the vehicle's `trailerCount` is within the specified range.
          allOf:
          - "$ref": "#/components/schemas/TrailerCountRange"
        maxEngineSize:
          description: |
            Contains the maximum permitted size of the engine, specified in cubic centimeters.

            This condition is met when the vehicle's `engineSize` exceeds the specified value.
          type: integer
          format: int32
          minimum: 0
        minEngineSize:
          description: |
            Contains the minimum permitted size of the engine, specified in cubic centimeters.

            This condition is met when the vehicle's `engineSize' is less than the specified value.
          type: integer
          format: int32
          minimum: 0
        maxOccupancy:
          description: |
            Contains the maximum permitted occupancy.

            This condition is met when the vehicle's `occupancy` exceeds the specified value.
          type: integer
          format: int32
          minimum: 1
        minOccupancy:
          description: |
            Contains the minimum permitted occupancy.

            This condition is met when the vehicle's `occupancy` is less than the specified value.
          type: integer
          format: int32
          minimum: 1
        restrictedTimes:
          "$ref": "#/components/schemas/TimeDomain"
        maxKpraLength:
          description: |
            Contains max permitted kingpin to rear axle length, in centimeters.

            This condition is met when the vehicle's `kpraLength` exceeds this value.
          type: integer
          format: int32
          minimum: 0
        maxPayloadCapacity:
          description: |
            Contains the maximum allowed payload capacity, specified in kilograms.

            This condition is met when the vehicle's `payloadCapacity` exceeds the specified value.
          type: integer
          format: int32
          minimum: 0
      required:
      - type
      example:
        "$ref": "#/components/examples/restrictionExample"
    VersionResponse:
      description: Returns the versions of the service components.
      properties:
        apiVersion:
          type: string
          description: The current version of the API.
          example: 8.18.0
        serviceVersion:
          type: string
          description: The current version of the service.
          example: 2022-12-15-b706cc8c-9057409
        dataVersions:
          type: array
          items:
            "$ref": "#/components/schemas/DataVersion"
          description: Returns the versions of data sets used by the service.
      required:
      - apiVersion
    ViolatedTransportMode:
      description: 'Contains details about the violated transport mode on this road,
        such as trucks being generally forbidden.

'
      allOf:
      - "$ref": "#/components/schemas/BaseNoticeDetail"
    ViolatedTruckRoadType:
      description: 'Contains details about the violated truck road type on this road.

'
      properties:
        title:
          type: string
          description: Detail title
        cause:
          type: string
          description: Cause of the notice
        type:
          type: string
          description: |
            Detail type. Each type of detail might contain extra attributes.

            **NOTE:** The list of possible detail types may be extended in the future.
            The client application is expected to handle such a case gracefully.
        truckRoadType:
          description: The truck road type causing this violation.
          type: string
      required:
      - type
    ViolatedZoneReference:
      description: 'Contains details about the zone associated with `violatedZoneRestriction`
        or `violatedAvoidZone`.

'
      properties:
        title:
          type: string
          description: Detail title
        cause:
          type: string
          description: Cause of the notice
        type:
          type: string
          description: |
            Detail type. Each type of detail might contain extra attributes.

            **NOTE:** The list of possible detail types may be extended in the future.
            The client application is expected to handle such a case gracefully.
        routingZoneRef:
          "$ref": "#/components/schemas/RoutingZoneReference"
      required:
      - type
    WebLink:
      description: The URL address to an external resource.
      properties:
        id:
          description: Unique identifier for the web link. It is used to deduplicate
            links defined in multiple sections.
          type: string
        href:
          "$ref": "#/components/schemas/Uri"
        text:
          description: Text describing the url address (e.g. The example website).
          type: string
        hrefText:
          description: 'The interactive (or clickable) portion of the text. If not
            present (default), the entire content of the text attribute will be considered.

'
          type: string
      required:
      - id
      - text
    AccessPointPlace:
      description: Access point to a venue/station
      properties:
        name:
          description: Location name
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        wheelchairAccessible:
          description: |
            Information about accessibility for people with a disability and who use a wheelchair.

            * `unknown` - Accessibility information is not available.
            * `yes` - Access point is wheelchair accessible.
            * `limited` - Accessibility is limited or assistance is required.
            * `no` - No accessible path from the access point to platforms.
          allOf:
          - "$ref": "#/components/schemas/WheelchairAccessibility"
      required:
      - type
      - location
      example:
        type: place
        location:
          lat: 50.339167
          lng: 18.93
    Attribution:
      description: The URL address to an external resource.
      properties:
        id:
          description: Unique identifier for the web link. It is used to deduplicate
            links defined in multiple sections.
          type: string
        href:
          "$ref": "#/components/schemas/Uri"
        text:
          description: Text describing the url address (e.g. The example website).
          type: string
        hrefText:
          description: 'The interactive (or clickable) portion of the text. If not
            present (default), the entire content of the text attribute will be considered.

'
          type: string
        type:
          "$ref": "#/components/schemas/AttributionLinkType"
      required:
      - id
      - text
    BoardAction:
      description: An action to board a ferry.
      allOf:
      - "$ref": "#/components/schemas/BaseAction"
    ChargingAction:
      description: 'An action to charge the vehicle.

'
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
        consumablePower:
          description: |
            Maximum charging power (in kW) available to the vehicle, based on the properties of the charging
            station and the vehicle.
          type: number
        arrivalCharge:
          description: 'Estimated vehicle battery charge before this action (in kWh).

'
          type: number
        targetCharge:
          description: 'Level to which vehicle battery should be charged by this action
            (in kWh).

'
          type: number
      required:
      - action
      - duration
    ChargingSetupAction:
      description: |
        An action to prepare for vehicle charging. Represents the time spent setting up for charging (e.g., payment processing), independent
        of the time required to actually charge the vehicle.
      allOf:
      - "$ref": "#/components/schemas/BaseAction"
    ChargingStationPlace:
      description: A charging station
      properties:
        name:
          description: Human readable name of this charging station
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        id:
          description: Identifier of this charging station
          type: string
        connectorAttributes:
          "$ref": "#/components/schemas/ChargingConnectorAttributes"
        brand:
          "$ref": "#/components/schemas/ChargingStationBrand"
      required:
      - type
      - location
      example:
        type: place
        location:
          lat: 50.339167
          lng: 18.93
    DeboardAction:
      description: An action to disembark a ferry.
      allOf:
      - "$ref": "#/components/schemas/BaseAction"
    DockingStationPlace:
      description: A place represents a docking station for rented vehicles.
      allOf:
      - "$ref": "#/components/schemas/BasePlace"
    EVConsumption:
      description: |
        EV parameters to be used for calculating consumption.

        The following attributes are required for calculating consumption:
        * `freeFlowSpeedTable`

        The following attributes are additionally required in order to calculate reachable routes:

        * `initialCharge`
        * `maxCharge`
        * `connectorTypes`
        * `chargingCurve`
        * `maxChargeAfterChargingStation`

        All remaining attributes are optional.
      type: object
      properties:
        freeFlowSpeedTable:
          allOf:
          - "$ref": "#/components/schemas/ConsumptionSpeedTable"
        trafficSpeedTable:
          description: |
            Function curve specifying consumption rate at a given traffic-reduced speed on a flat stretch of road.

            See `freeFlowSpeedTable` for a description of the string format.
          allOf:
          - "$ref": "#/components/schemas/ConsumptionSpeedTable"
        ascent:
          description: 'Rate of energy consumed per meter rise in elevation (in Wh/m,
            i.e., Watt-hours per meter).

'
          type: number
          minimum: 0
        descent:
          description: 'Rate of energy recovered per meter fall in elevation (in Wh/m,
            i.e., Watt-hours per meter).

'
          type: number
          minimum: 0
        auxiliaryConsumption:
          description: |
            Rate of energy (in Wh/s) consumed by the vehicle's auxiliary systems (for example, air conditioning, lights).
            The value represents the number of Watt-hours consumed per second of travel.
          type: number
          minimum: 0
        initialCharge:
          description: |
            Charge level of the vehicle's battery at the start of the route (in kWh).
            Value must be less than or equal to the value of `maxCharge`.
          type: number
          minimum: 0
        maxCharge:
          description: 'Total capacity of the vehicle''s battery (in kWh).

'
          type: number
          minimum: 0
        chargingCurve:
          description: |
            Function curve describing the maximum battery charging rate (in kW) at a given charge level (in kWh).

            The format of the string is a comma-separated list of numbers, as follows:

            ```
            <CHARGE_0>,<RATE_0>,<CHARGE_1>,<RATE_1>,...,<RATE_N>,<CHARGE_N>
            ```

            where charge values are strictly increasing, non-negative floating-point values in units
            of (kWh), and rate values are positive floating point values in units of (kW).

            Charge values must cover the entire range of `[0, maxChargeAfterChargingStation`]. The
            charging curve is piecewise constant, e.g., for any charge in the range `[CHARGE_0,
            CHARGE_1)`, the value of the function is `RATE_0`.

            The algorithm calculates a route as the best possible combination of driving and charging
            parts and uses the charging curve to evaluate the most efficent range of
            charging. For example, if the rate of charging is high at lower levels of battery, but slows down significantly after charging a little, stopping
            often and charging less, but quicker, at each station might be better for the overall route.
            Because batteries lose charging speed with use, providing a charging curve for the
            exact battery would give more accurate charging time estimate than providing a
            generic curve for all batteries of one type.
          type: string
          example: 0,207,28.761,207,29.011,173,43.493,173,43.743,145,51.209,145,51.459,113,56.120,113,56.370,87,80.0,10
        maxChargingVoltage:
          description: 'Maximum charging voltage supported by the vehicle''s battery
            (in Volt).

'
          type: number
          minimum: 0
        maxChargingCurrent:
          description: 'Maximum charging current supported by the vehicle''s battery
            (in Ampere).

'
          type: number
          minimum: 0
        maxChargeAfterChargingStation:
          description: |
            Maximum charge to which the battery should be charged at a charging station (in kWh).
            Value must be less than or equal to the value of `maxCharge`.

            The algorithm calculates a route as the best possible combination of driving and charging
            parts so charging at a charging station does not happen strictly to the value of
            this parameter. Instead, the algorithm attempts to leave every station with
            different charge levels, and only the best possible combination of charging stations
            and target charge will form the final route.

            For example, if there is a fast but not reachable charging station on the route,
            the algorithm prefers first to charge at a slower station, but only to a level that enables it
            to reach the fast station. This way it calculates the best possible combination of driving
            and charging parts.
          type: number
          minimum: 0
        minChargeAtChargingStation:
          description: |
            Minimum charge when arriving at a charging station (in kWh).
            Value must be less than the value of `maxChargeAfterChargingStation`.

            The algorithm calculates a route as the best possible combination of driving and charging
            parts so visiting a charging station is planned not when the remaining charge is close
            to the value of this parameter but when it is part of the best possible charging
            plan for the given route.

            For example, it might prefer charging a still half-full battery at the fast charging station because
            there are only slower stations later on the route and the remaining charge is not
            enough to reach the destination without charging at all.
          type: number
          minimum: 0
        minChargeAtFirstChargingStation:
          description: |
            Minimum charge when arriving at first charging station (in kWh).
            Value must be less than the value of `maxChargeAfterChargingStation`.

            This overrides `minChargeAtChargingStation` for the first charging station. If not specified, `minChargeAtChargingStation`
            will be used for all charging stations, including the first one.

            This is usually used when the current charge is too low to reach a charging station within `minChargeAtChargingStation` limits.
          type: number
          minimum: 0
        minChargeAtDestination:
          description: |
            Minimum charge at the final route destination (in kWh).
            Value must be less than the value of `maxChargeAfterChargingStation`.

            The algorithm calculates a route as the best possible combination of driving and charging
            parts while making sure that the actual value of the charge at the destination would be close to the
            value of this parameter. I.e., the resulting value is expected to be bigger
            than this parameter's value by no more than 10% of the battery capacity.
          type: number
          minimum: 0
        chargingSetupDuration:
          description: |
            Time spent (in seconds) after arriving at a charging station but before actually charging
            (for example, time spent for payment processing).
          type: integer
          format: int32
          minimum: 0
        connectorTypes:
          description: |
            Comma-separated list of connector types that are compatible with the vehicle. If `makeReachable` is set to `true`,
            then only stations with any of these connector types will be evaluated as a potential charging stop.
            For stations with multiple compatible connectors, the charging time is based on the connector type with the highest power rating among them.

            Currently supported connector types are:
              * `iec62196Type1Combo`:  Type 1 Combo connector, commonly called "SAE J1772"
              * `iec62196Type2Combo`:  Type 2 Combo connector, commonly called "Mennekes"
              * `chademo`: CHAdeMO connector
              * `tesla`: Tesla connector
          type: string
          example: iec62196Type1Combo,chademo
      required:
      - freeFlowSpeedTable
    Fuel:
      description: |
        **Disclaimer: This parameter is currently in beta release, and is therefore subject to breaking changes.**

        Fuel parameters to be used for calculating consumption and related CO2 emission.

        The following attributes are required for calculating consumption:
          * `type`
          * `freeFlowSpeedTable`

        **NOTE:** We do not support hybrid vehicles (EV + Other fuel types). Consumption parameters are not supported for combination of
        `ev` and `fuel` vehicles.
      type: object
      properties:
        type:
          description: 'Vehicle fuel type (diesel, petrol, lpg, etc.) required for
            calculation of consumption and CO2 emission for fuel-based vehicles.

'
          allOf:
          - "$ref": "#/components/schemas/FuelType"
        freeFlowSpeedTable:
          allOf:
          - "$ref": "#/components/schemas/ConsumptionSpeedTable"
        trafficSpeedTable:
          description: |
            Function curve specifying consumption rate at a given traffic-reduced speed on a flat stretch of road.

            See `freeFlowSpeedTable` for a description of the string format.
          allOf:
          - "$ref": "#/components/schemas/ConsumptionSpeedTable"
        additionalConsumption:
          description: |
            Rate of fuel (in ml/s for diesel, petrol & LPG, gm/s for CNG) consumed by the vehicle for any other reason
            additional to fuel consumption for speed.
          type: number
          minimum: 0
        ascent:
          description: 'Rate of fuel consumed per meter rise in elevation (in ml/m
            for diesel, petrol & LPG, gm/m for CNG).

'
          type: number
          minimum: 0
      required:
      - type
      - freeFlowSpeedTable
    MatchTrace:
      description: Trace file with points and path match parameters
      type: object
      properties:
        trace:
          type: array
          minItems: 2
          maxItems: 50000
          items:
            "$ref": "#/components/schemas/MatchTracePoint"
        via:
          type: array
          items:
            "$ref": "#/components/schemas/MatchTraceVia"
      required:
      - trace
      example:
        "$ref": "#/components/examples/matchTraceExample"
    PedestrianNotice:
      description: A notice contains important notifications.
      properties:
        title:
          type: string
          description: Human-readable notice description.
          example: Violated avoid tunnel
        code:
          type: string
          description: "Extensible enum: `simplePolyline` `pedestrianOptionViolated`
            `violatedAvoidTunnel` `violatedAvoidDirtRoad` `...`  \nCurrently known
            codes (non-exhaustive: this list could be extended for new situations):\n\n|
            Code      | Description  | Severity |\n| --------- | ------- | ----            |\n| simplePolyline | An accurate polyline is not available for this section.
            The returned polyline has been generated from departure and arrival places
            | info |\n| pedestrianOptionViolated | This section violates the parameter
            `pedestrian[speed]` or `pedestrian[maxDistance]` | critical |\n| violatedAvoidTunnel
            | Route did not manage to avoid user preference | critical |\n| violatedAvoidDirtRoad
            | Route did not manage to avoid user preference | critical |\n"
          example: violatedAvoidTunnel
          x-extensible-enum:
          - simplePolyline
          - pedestrianOptionViolated
          - violatedAvoidTunnel
          - violatedAvoidDirtRoad
        severity:
          "$ref": "#/components/schemas/NoticeSeverity"
        details:
          type: array
          description: Additional details about the notice
          items:
            "$ref": "#/components/schemas/BaseNoticeDetail"
      required:
      - code
    PedestrianSpan:
      description: 'Span attached to a `Section` describing pedestrian content.

'
      properties:
        offset:
          description: 'Offset of a coordinate in the section''s polyline.

'
          type: integer
          format: int32
          minimum: 0
        length:
          description: 'Length of the span.

'
          allOf:
          - "$ref": "#/components/schemas/Distance"
        duration:
          description: Duration of the span.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        streetAttributes:
          description: |
            `StreetAttributes` is applied to a span of a route section and describes attribute flags of a street.
            * `rightDrivingSide`: Do vehicles have to drive on the right-hand side of the road or the left-hand side.
            * `dirtRoad`: This part of the route has an un-paved surface.
            * `tunnel`: This part of the route is a tunnel.
            * `bridge`: This part of the route is a bridge.
            * `ramp`: This part of the route is a ramp (usually connecting to/from/between highways).
            * `motorway`: This part of the route is a controlled access road (usually highways with motorway sign).
            * `roundabout`: This part of the route is a roundabout.
            * `underConstruction`: This part of the route is under construction.
            * `dividedRoad`: This part of the route uses a road with a physical or legal divider in the middle.
            * `privateRoad`: This part of the route uses a privately owned road.
            * `controlledAccessHighway`: This part of the route is a either controlled access or limited access road or both.
            * `builtUpArea`: This part of the route most likely passes through a built-up area.

            As it is possible that new street attributes are supported in the future, unknown street attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/StreetAttributes"
        walkAttributes:
          type: array
          description: |
            Accessibility and walk-related attribute flags.

            * `stairs`: This part of the route is a staircase.
            * `park`: This part of the route is in a park.
            * `indoor`: This part of the route is inside a venue.
            * `open`: This part of the route is open to walking.
            * `noThrough`: This part of the route can only be traversed if origin, destination or any via waypoint is located there.
            * `tollRoad`: Access to this part of the route is restricted with a fee (or toll).

            As it is possible that new attributes are supported in the future, unknown attributes should be ignored.
          items:
            "$ref": "#/components/schemas/WalkAttributes"
        carAttributes:
          description: |
            Car specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describes access flags of a street.
            * `open`:  A part of the route that is open to cars.
            * `noThrough`:  A part of the route that can only be traversed if origin, destination or any via waypoint is located there.
            * `tollRoad`: Access to this part of the route is restricted with a fee (or toll).

            As it is possible that new access attributes are supported in the future, unknown access attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        truckAttributes:
          description: |
            Truck specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describes access flags of a street.
            * `open`: This part of the route is open to trucks.
            * `noThrough`: This part of the route can only be traversed if origin, destination or any via waypoint is located there.
            * `tollRoad`: This part of the route is restricted with a fee (or toll).

            As it is possible that new access attributes are supported in the future, unknown access attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        scooterAttributes:
          description: |
            Scooter specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describes access flags of a street.
            * `open`: This part of the route is open to scooters.

            As it is possible that new access attributes are supported in the future, unknown access attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        names:
          description: Designated name for the span (e.g. a street name or a transport
            name)
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        routeNumbers:
          description: Designated route name or number of the span (e.g. 'M25')
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedRouteNumber"
        countryCode:
          "$ref": "#/components/schemas/CountryCode"
        stateCode:
          "$ref": "#/components/schemas/StateCode"
        functionalClass:
          "$ref": "#/components/schemas/FunctionalClass"
        speedLimit:
          description: "**NOTE:** Attribute speedLimit is deprecated. Use maxSpeed
            instead.\n"
          allOf:
          - "$ref": "#/components/schemas/Speed"
        maxSpeed:
          "$ref": "#/components/schemas/MaxSpeed"
        dynamicSpeedInfo:
          "$ref": "#/components/schemas/DynamicSpeedInfo"
        segmentId:
          description: |
            **NOTE:** Attribute segmentId is deprecated. Use segmentRef instead.

            The directed topology segment id including prefix (e.g '+here:cm:segment:').

            The id consists of two parts.
            * The direction ('+' or '-')
            * followed by the topology segment id (a unique identifier within the HERE platform catalogs).

            The direction specifies whether the route is using the segment in its canonical direction ('+' aka traveling along the geometry's direction), or against it ('-' aka traveling against the geometry's direction).
          type: string
          deprecated: true
        segmentRef:
          "$ref": "#/components/schemas/SegmentRef"
        baseDuration:
          description: |
            Duration of this span (in seconds) ignoring time-aware information.

            For pedestrian mode, the reported time is currently equal to that in `duration`.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        typicalDuration:
          description: |
            Duration of this span (in seconds) under typical traffic conditions.

            For pedestrian mode, the reported time is currently equal to that in `duration`.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        incidents:
          description: |
            A list of indices into the incident array of the parent section.
            References all incidents that apply to the span.
          type: array
          items:
            type: integer
    PedestrianSummary:
      description: Total value of key attributes for a route section.
      properties:
        duration:
          "$ref": "#/components/schemas/Duration"
        length:
          "$ref": "#/components/schemas/Distance"
        baseDuration:
          description: |
            Duration (in seconds) ignoring time-aware information.

            For pedestrian mode, the reported time is currently equal to that in `duration`.
          allOf:
          - "$ref": "#/components/schemas/Duration"
      required:
      - duration
      - length
    PedestrianTransport:
      description: Information about a transport
      properties:
        mode:
          "$ref": "#/components/schemas/PedestrianMode"
      required:
      - mode
    Place:
      description: A place represents a generic location relevant for the route.
      allOf:
      - "$ref": "#/components/schemas/BasePlace"
    RangePrice:
      properties:
        type:
          description: |
            Type of price represented by this object. The API customer is responsible for correctly visualizing
            the pricing model. As it is possible to extend the supported price types in the future,
            the price information should be hidden when an unknown type is encountered.

            Available price types are:

              * `value` - A single value.
              * `range` - A range value that includes a minimum and maximum price.
          type: string
        estimated:
          description: Attribute value is `true` if the fare price is estimated, `false`
            if it is an exact value.
          type: boolean
          default: false
        currency:
          description: Local currency of the price compliant to ISO 4217
          type: string
        unit:
          description: |
            When set, the price is paid for a specific duration.

            Examples:
              * `"unit": 3600` - price for one hour
              * `"unit": 28800` - price for 8 hours
              * `"unit": 86400` - price for one day
          allOf:
          - "$ref": "#/components/schemas/Duration"
        minimum:
          description: Minimum price
          type: number
        maximum:
          description: Maximum price
          type: number
      required:
      - type
      - currency
      - minimum
      - maximum
    RoadInfo:
      description: Road information attached to an offset action
      properties:
        type:
          "$ref": "#/components/schemas/RoadInfoType"
        name:
          description: |
            Name of the road

            If the road has multiple names, each name will be a separate entry in the array.
            The road names can be in multiple languages. If a preferred language was provided,
            and names in that language are available, they will be prioritized in the array.
            Otherwise the default name of the street is prioritized.
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        number:
          description: Route name or number (e.g. 'M25')
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedRouteNumber"
        toward:
          description: Names of destinations on sign which can be reached when going
            in that direction
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
      example:
        fennstrasse:
          type: street
          name:
          - value: FennstraÃe
            language: de
          number:
          - value: B96
            language: de
          toward:
          - value: Reinickendorf
            language: de
    RouteLabel:
      oneOf:
      - description: Designated name of the road (e.g. a street name or a transport
          name)
        properties:
          name:
            "$ref": "#/components/schemas/LocalizedString"
      - description: Designated route name or number of the road (e.g. 'M25')
        properties:
          routeNumber:
            "$ref": "#/components/schemas/LocalizedRouteNumber"
    RouteResponseNotice:
      example:
        "$ref": "#/components/examples/routeResponseNoticeExample"
      description: A notice contains important notifications.
      properties:
        title:
          type: string
          description: Human-readable notice description.
          example: No route found
        code:
          type: string
          description: "Extensible enum: `noRouteFound` `failedRouteHandleCreation`
            `cancelled` `routeCalculationFailed` `couldNotMatchOrigin` `couldNotMatchDestination`
            `violatedTransportModeInRouteHandleDecoding` `unknownError` `routeLengthLimitExceeded`
            `avoidSegmentsInvalidId` `avoidZonesInvalidId` `returnToRoute` `importFailed`
            `importSplitRoute` `travelTimeExceedsDriverWorkHours` `...`  \nCurrently
            known codes (non-exhaustive: this list could be extended for new error
            situations):\n\n| Code      | Description  | Severity |\n| --------- |
            ------- | ------- |\n| noRouteFound | No Route was found | critical |\n|
            failedRouteHandleCreation | No RouteHandle was created | critical |\n|
            cancelled | Calculation took too long and was cancelled | critical |\n|
            routeCalculationFailed | Calculation did not succeed | critical |\n| couldNotMatchOrigin
            | Origin waypoint could not be matched | critical |\n| couldNotMatchDestination
            | Destination waypoint could not be matched | critical |\n| noReachableChargingStationsFound
            | Initial charge is not enough to reach any known charging stations |
            critical |\n| violatedTransportModeInRouteHandleDecoding | Route handle
            decoding failed due to forbidden segments for the specified transport
            mode | critical |\n| unknownError | No detailed error cause has been determined
            | critical |\n| routeLengthLimitExceeded | Distance between waypoints
            is too large for current options | critical |\n| avoidSegmentsInvalidId
            | The provided segment ID was not found | info |\n| avoidZonesInvalidId
            | The provided zone ID was not found | info |\n| returnToRoute | Applicable
            only to requests with route handle provided. Current route position was
            not on the original route. New route was calculated from the current position
            to the destination. Old route may have been reused. | info |\n| importFailed
            | No route section was found for imported waypoints | critical |\n| importSplitRoute
            | Not all trace points were matched | info |\n| travelTimeExceedsDriverWorkHours
            | The route travelTime exceeds drive time sequence provided in `driver[schedule]`
            parameter | critical |\n"
          example: noRouteFound
          x-extensible-enum:
          - noRouteFound
          - failedRouteHandleCreation
          - cancelled
          - routeCalculationFailed
          - couldNotMatchOrigin
          - couldNotMatchDestination
          - violatedTransportModeInRouteHandleDecoding
          - unknownError
          - routeLengthLimitExceeded
          - avoidSegmentsInvalidId
          - avoidZonesInvalidId
          - returnToRoute
          - importFailed
          - importSplitRoute
          - travelTimeExceedsDriverWorkHours
        severity:
          "$ref": "#/components/schemas/NoticeSeverity"
        details:
          type: array
          description: Additional details about the notice
          items:
            "$ref": "#/components/schemas/BaseNoticeDetail"
      required:
      - code
    Routing403ErrorResponseSchema:
      oneOf:
      - "$ref": "#/components/schemas/AuthErrorResponseSchema"
      - "$ref": "#/components/schemas/RoutingErrorResponse"
    SignpostLabel:
      description: 'Label on a signpost.

'
      anyOf:
      - description: Text on a signpost label.
        properties:
          name:
            "$ref": "#/components/schemas/LocalizedString"
      - description: Route number on a signpost label. The `routeType` property of
          the LocalizedRouteNumber is always null at the moment for SignpostLabel,
          because the data is currently not available.
        properties:
          routeNumber:
            "$ref": "#/components/schemas/LocalizedRouteNumber"
    SinglePrice:
      properties:
        type:
          description: |
            Type of price represented by this object. The API customer is responsible for correctly visualizing
            the pricing model. As it is possible to extend the supported price types in the future,
            the price information should be hidden when an unknown type is encountered.

            Available price types are:

              * `value` - A single value.
              * `range` - A range value that includes a minimum and maximum price.
          type: string
        estimated:
          description: Attribute value is `true` if the fare price is estimated, `false`
            if it is an exact value.
          type: boolean
          default: false
        currency:
          description: Local currency of the price compliant to ISO 4217
          type: string
        unit:
          description: |
            When set, the price is paid for a specific duration.

            Examples:
              * `"unit": 3600` - price for one hour
              * `"unit": 28800` - price for 8 hours
              * `"unit": 86400` - price for one day
          allOf:
          - "$ref": "#/components/schemas/Duration"
        value:
          description: The price value
          type: number
      required:
      - type
      - currency
      - value
    StationPlace:
      description: A station
      properties:
        name:
          description: Location name
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        id:
          description: Identifier of this station
          type: string
        platform:
          description: Platform name or number for the departure.
          type: string
        code:
          description: Short text or a number that identifies the place for riders.
          type: string
        wheelchairAccessible:
          description: |
            Information about accessibility for people with a disability and who use a wheelchair.

            * `unknown` - Accessibility information is not available.
            * `yes` - There exists some accessible path from outside the station to the specific stop/platform.
            * `limited` - Accessibility is limited or assistance is required.
            * `no` - There exists no accessible path from outside the station to the specific stop/platform.
          allOf:
          - "$ref": "#/components/schemas/WheelchairAccessibility"
      required:
      - type
      - location
      example:
        type: place
        location:
          lat: 50.339167
          lng: 18.93
    TransitNotice:
      description: A notice contains important notifications.
      properties:
        title:
          type: string
          description: Human-readable notice description.
          example: No schedule
        code:
          type: string
          description: "Extensible enum: `noSchedule` `noIntermediate` `unwantedMode`
            `scheduledTimes` `simplePolyline` `violatedAvoidFerry` `violatedAvoidRailFerry`
            `...`  \nCurrently known codes (non-exhaustive: this list could be extended
            for new situations):\n\n| Code      | Description  | Severity |\n| ------            | ------- | ------- |\n| noSchedule | A timetable schedule is not available
            for the transit line in this section, and only the run frequency is available.
            As a result, departure/arrival times are approximated | info |\n| noIntermediate
            | Information about intermediate stops is not available for this transit
            line | info |\n| unwantedMode | This section contains a transport mode
            that was explicitly disabled. Mode filtering is not available in this
            area | info |\n| scheduledTimes | The times returned on this section are
            the scheduled times even though delay information are available | info
            |\n| simplePolyline | An accurate polyline is not available for this section.
            The returned polyline has been generated from departure and arrival places
            | info |\n| violatedAvoidFerry | Route did not manage to avoid user preference
            | critical |\n| violatedAvoidRailFerry | Route did not manage to avoid
            user preference | critical |\n"
          example: noSchedule
          x-extensible-enum:
          - noSchedule
          - noIntermediate
          - unwantedMode
          - scheduledTimes
          - simplePolyline
          - violatedAvoidFerry
          - violatedAvoidRailFerry
        severity:
          "$ref": "#/components/schemas/NoticeSeverity"
        details:
          type: array
          description: Additional details about the notice
          items:
            "$ref": "#/components/schemas/BaseNoticeDetail"
      required:
      - code
    TransitSpan:
      description: |
        Contains information attached to a contiguous part of a `Section`. The information may be
        attached along different dimensions of a section which are geometry (spatial), distance or
        time.

        A section, if it uses spans, has an optional attribute `spans` which is an array of
        extended `Span` types.

        The attributes of a span which should be returned in the response are
        configured by a request parameter.

        Use this type as a base for any span extension for sections that provide spans.
      properties:
        offset:
          description: 'Offset of a coordinate in the section''s polyline.

'
          type: integer
          format: int32
          minimum: 0
        length:
          description: 'Length of the span.

'
          allOf:
          - "$ref": "#/components/schemas/Distance"
        duration:
          description: Duration of the span.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        countryCode:
          "$ref": "#/components/schemas/CountryCode"
        stateCode:
          "$ref": "#/components/schemas/StateCode"
        names:
          description: Designated name for the span (e.g. a street name or a transport
            name)
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        segmentId:
          description: |
            **NOTE:** Attribute segmentId is deprecated. Use segmentRef instead.

            The directed topology segment id including prefix (e.g '+here:cm:segment:').

            The id consists of two parts.
            * The direction ('+' or '-')
            * followed by the topology segment id (a unique identifier within the HERE platform catalogs).

            The direction specifies whether the route is using the segment in its canonical direction ('+' aka traveling along the geometry's direction), or against it ('-' aka traveling against the geometry's direction).

            This attribute will not appear for HERE Public Transit v8 and HERE Intermodal Routing v8 requests
          type: string
          deprecated: true
        segmentRef:
          description: |
            A reference to the HMC topology segment used in this span.

            The standard representation of a segment reference has the following structure:
            {catalogHrn}:{catalogVersion}:({layerId})?:{tileId}:{segmentId}(#{direction}({startOffset}..{endOffset})?)?

            The individual parts are:
            * catalogHrn: The HERE Resource Name that identifies the source catalog of the segment, example: hrn:here:data::olp-here:rib-2
            * catalogVersion: The catalog version
            * layerId (optional): The layer inside the catalog where the segment can be found, example: topology-geometry
            * tileId: The HERE tile key of the partition/tile where the segment is located in the given version of the catalog. This can be on a lower level than the actual segment is stored at (for example, the provided tile ID can be on level 14, despite topology-geometry partitions being tiled at level 12). The level of a HERE tile key is indicated by the position of the highest set bit in binary representation. Since the HERE tile key represents a morton code of the x and y portion of the Tile ID, the level 12 tile ID can be retrieved from the level 14 tile ID by removing the 4 least significant bits (or 2 bits per level) or 1 hexadecimal digit. For example, the level 14 tile 377894441 is included in the level 12 tile 23618402 (377894441<sub>10</sub> = 16863629<sub>16</sub> &rightarrow; 1686362<sub>16</sub> = 23618402<sub>10</sub>)
            * segmentId: The identifier of the referenced topology segment inside the catalog, example: here:cm:segment:84905195
            * direction (optional): Either '*' for undirected or bidirectional, '+' for positive direction, '-' for negative direction, or '?' for unknown direction (not used by the routing service)
            * startOffset/endOffset (optional): The start- and end offset are non-negative numbers between 0 and 1, representing the start and end of the referenced range using a proportion of the length of the segment. 0 represents the start and 1 the end of the segment, relative to the indicated direction (or positive direction in case of undirected segments). Example: 0.7..1

            This attribute will not appear for HERE Public Transit v8 and HERE Intermodal Routing v8 requests

            Example of a segment reference in standard representation:
            hrn:here:data::olp-here:rib-2:1363::377894441:here:cm:segment:84905195#+0.7..1

            The segment references can also be provided in a compact representation, to reduce the response size. In the compact representation, some parts are replaced by placeholders, which can be resolved using the refReplacements dictionary in the parent section.
            The placeholder format is ```\$\d+``` and needs to be surrounded by colons or string start/end. It can be captured with the following regular expression: ```(^|:)\$\d+(:|$)/``` .

            Example of the segment reference previously mentioned in compact representation:
            $0:377894441:$1:84905195#+0.7..1
            With the corresponding refReplacements:
            "refReplacements": {
              "0": "hrn:here:data::olp-here:rib-2:1363:",
              "1": "here:cm:segment"
            }
          type: string
        refReplacements:
          description: |
            Dictionary of placeholders to replacement strings for the compact representation of map entity references.

            This attribute will not appear for HERE Public Transit v8 and HERE Intermodal Routing v8 requests
          type: object
          additionalProperties:
            type: string
    TransitTransport:
      description: Transit transport information.
      properties:
        mode:
          "$ref": "#/components/schemas/TransitMode"
        name:
          description: Transit line name
          type: string
          example: U2
        headsign:
          description: Transit line headsign
          type: string
        category:
          description: Human readable transport category (such as Bus, Gondola, Tram,
            Train, ...)
          type: string
          example: Train
        color:
          description: Color of the transport polyline and background for the transport
            name.
          allOf:
          - "$ref": "#/components/schemas/Color"
        textColor:
          description: Color of the transport name.
          allOf:
          - "$ref": "#/components/schemas/Color"
        shortName:
          description: Short name of a transit line.
          type: string
          example: U2
        longName:
          description: Long name of a transit line.
          type: string
          example: Pankow - Ruhleben
      required:
      - mode
    Truck:
      type: object
      description: Vehicle-specific parameters
      properties:
        shippedHazardousGoods:
          description: "Hazardous goods restrictions refer to the limitations and
            regulations imposed on the transportation of specific types of hazardous
            materials during a trip. \n\nA comma-separated list of hazardous goods
            being shipped in the vehicle. The following values are possible:\n\n*
            `explosive`: Materials that are capable of causing an explosion.\n* `gas`:
            Gas (definition varies from country to country). For details, check [here](https://en.wikipedia.org/wiki/HAZMAT_Class_2_Gases).\n*
            `flammable`: Materials that are easily ignited and capable of catching
            fire.\n* `combustible`: Materials that have the potential to burn or catch
            fire.\n* `organic`: Materials derived from living organisms or containing
            carbon compounds.\n* `poison`: Substances that can cause harm or death
            when ingested, inhaled, or absorbed.\n* `radioactive`: Materials that
            emit radiation and pose potential health risks.\n* `corrosive`: Substances
            that can cause damage or destruction through chemical reactions.\n* `poisonousInhalation`:
            Materials that are toxic when inhaled.\n* `harmfulToWater`: Materials
            that can cause pollution or harm to water bodies.\n* `other`: Other types
            of hazardous materials not covered by the above categories.\n\n**Limitations:**
            only valid for `transportMode=truck`.\n"
          type: string
          example: explosive,gas,flammable
        grossWeight:
          description: |
            Vehicle weight, including trailers and shipped goods, specified in kilograms.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
        weightPerAxle:
          description: |
            Heaviest vehicle weight-per-axle, specified in kilograms.

            Heaviest weight-per-axle, regardless of axle-type or axle-group. It is evaluated against
            all axle-weight restrictions, including single-axle and tandem-axle weight restrictions.
            It is useful if differences between axle types, like tandem and triple axles, are not
            relevant. This is the case in many countries, since they don't distinguish between these
            different axle groups on signs and in regulations.

            More fine-grained axle weight input is possible with `weightPerAxleGroup`.

            **Note:** `weightPerAxleGroup` and `weightPerAxle` are incompatible.
            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
        weightPerAxleGroup:
          "$ref": "#/components/schemas/WeightPerAxleGroup"
        height:
          description: |
            Vehicle height, specified in centimeters.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
          maximum: 5000
        width:
          description: |
            Vehicle width, specified in centimeters.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
          maximum: 5000
        length:
          description: |
            Vehicle length, specified in centimeters.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
          maximum: 30000
        kpraLength:
          description: |
            Kingpin to rear axle length, in centimeters.

            **NOTE:** Currently, the KPRA restrictions are only present in California and Idaho.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
        payloadCapacity:
          description: |
            Allowed payload capacity, including trailers, specified in kilograms.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
        tunnelCategory:
          "$ref": "#/components/schemas/TunnelCategory"
        axleCount:
          description: |
            The value that specifies the total number of axles the vehicle has, i.e., axles on the base vehicle and any attached trailers.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 2
          maximum: 255
        trailerAxleCount:
          description: |
            The value that specifies the total number of axles across all the trailers attached to the vehicle.
            This number is included in `axleCount`, hence `trailerAxleCount` must be less than `axleCount`.

            **Limitations:** only valid for `transportMode=truck`, `trailerCount` > 0 and `axleCount` > 1.

            Note: This parameter is currently used only for the calculation of tolls in regions where it is applicable.
          type: integer
          format: int32
          minimum: 1
        tiresCount:
          description: |
            The value that specifies the total number of tires the vehicle has, i.e., the tires on the base vehicle and any attached trailers.

            Note: This parameter is currently used only for the calculation of tolls in regions where it is applicable.
          type: integer
          format: int32
          minimum: 1
          maximum: 255
        category:
          description: |
            Specifies the category of the vehicle. The supported values are:

            * `undefined`: The vehicle category is undefined, and no special considerations are taken into
              account. Vehicle routing will proceed as normal.
            * `lightTruck`: The vehicle is a truck light enough to be classified more as a car than as a truck.
              This exempts it from many legal restrictions for normal trucks. However, restrictions related to the physical dimensions of the truck or its cargo still apply.

              For more details, refer to [Truck Categories](https://developer.here.com/documentation/routing-api/dev_guide/topics/truck-routing/truck-routing.html).

              **Limitations:** only valid for `transportMode=truck`.
          type: string
          enum:
          - undefined
          - lightTruck
          default: undefined
        trailerCount:
          description: |
            The number of trailers attached to the vehicle.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          default: 0
        hovOccupancy:
          description: |
            The number of occupants in the vehicle, defined as individuals occupying a seat with a restraint device.
            This value affects the ability of the router to use HOV (High-Occupancy Vehicles) restricted lanes.

            Limitations:
              * Currently, any value over 1 is interpreted as the ability to use any HOV lane, including those restricted to 3+ passengers.
          type: integer
          minimum: 1
          default: 1
        licensePlate:
          description: |
            Specifies the information about the vehicle's license plate number.
            This information is used to evaluate whether certain vehicle restrictions in environmental zones apply.
            Currently, only the last character of the license plate can be provided.

            Format: `lastCharacter:{character}`

            Example: `lastCharacter:2`
          type: string
        speedCap:
          description: |
            Specifies the maximum speed, in meters per second (m/s), that the user wishes not to exceed.
            This parameter affects the route's estimated time of arrival (ETA) and consumption calculation.

            Limitations:
              * valid for following transport modes: `car`, `truck`, `scooter`, `taxi`, `bus`, and `privateBus`

            Notes:
              * Car and Truck mode updates route ETA.
              * Scooter mode updates route optimization and ETA.
          type: number
          minimum: 1.0
          maximum: 70.0
        engineSizeCc:
          description: |
            Specifies the engine size of the vehicle in cubic centimeters.
            Currently, the value is used only in scooter mode.
            This parameter is utilized to determine if the scooter can be classified as a moped.
            Scooters with an engine size less than 51cc are considered mopeds.
            **Alpha**: This API is in development. It may not be stable and is subject to change. It may have no impact on response.
          type: integer
          minimum: 0
          maximum: 2000
        occupancy:
          description: |
            The number of occupants on the vehicle, defined as individuals occupying a seat.
            This value affects the ability of the router to use HOV (High-Occupancy Vehicles) restricted lanes.
            This parameter also affects scooter occupancy restrictions.
            **Alpha**: This API is in development. It may not be stable and is subject to change. It may have no impact on response.

            Limitations:
              * Currently, any value over 1 is interpreted as the ability to use any HOV lane, including those restricted to 3+ passengers.

            **Note:**: This parameter can't be used with 'vehicle[hovOccupancy]'.
          type: integer
          minimum: 1
          default: 1
        type:
          "$ref": "#/components/schemas/TruckTypeWithDefault"
      deprecated: true
    Vehicle:
      type: object
      description: Vehicle-specific parameters
      properties:
        shippedHazardousGoods:
          description: "Hazardous goods restrictions refer to the limitations and
            regulations imposed on the transportation of specific types of hazardous
            materials during a trip. \n\nA comma-separated list of hazardous goods
            being shipped in the vehicle. The following values are possible:\n\n*
            `explosive`: Materials that are capable of causing an explosion.\n* `gas`:
            Gas (definition varies from country to country). For details, check [here](https://en.wikipedia.org/wiki/HAZMAT_Class_2_Gases).\n*
            `flammable`: Materials that are easily ignited and capable of catching
            fire.\n* `combustible`: Materials that have the potential to burn or catch
            fire.\n* `organic`: Materials derived from living organisms or containing
            carbon compounds.\n* `poison`: Substances that can cause harm or death
            when ingested, inhaled, or absorbed.\n* `radioactive`: Materials that
            emit radiation and pose potential health risks.\n* `corrosive`: Substances
            that can cause damage or destruction through chemical reactions.\n* `poisonousInhalation`:
            Materials that are toxic when inhaled.\n* `harmfulToWater`: Materials
            that can cause pollution or harm to water bodies.\n* `other`: Other types
            of hazardous materials not covered by the above categories.\n\n**Limitations:**
            only valid for `transportMode=truck`.\n"
          type: string
          example: explosive,gas,flammable
        grossWeight:
          description: |
            Vehicle weight, including trailers and shipped goods, specified in kilograms.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
        weightPerAxle:
          description: |
            Heaviest vehicle weight-per-axle, specified in kilograms.

            Heaviest weight-per-axle, regardless of axle-type or axle-group. It is evaluated against
            all axle-weight restrictions, including single-axle and tandem-axle weight restrictions.
            It is useful if differences between axle types, like tandem and triple axles, are not
            relevant. This is the case in many countries, since they don't distinguish between these
            different axle groups on signs and in regulations.

            More fine-grained axle weight input is possible with `weightPerAxleGroup`.

            **Note:** `weightPerAxleGroup` and `weightPerAxle` are incompatible.
            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
        weightPerAxleGroup:
          "$ref": "#/components/schemas/WeightPerAxleGroup"
        height:
          description: |
            Vehicle height, specified in centimeters.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
          maximum: 5000
        width:
          description: |
            Vehicle width, specified in centimeters.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
          maximum: 5000
        length:
          description: |
            Vehicle length, specified in centimeters.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
          maximum: 30000
        kpraLength:
          description: |
            Kingpin to rear axle length, in centimeters.

            **NOTE:** Currently, the KPRA restrictions are only present in California and Idaho.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
        payloadCapacity:
          description: |
            Allowed payload capacity, including trailers, specified in kilograms.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
        tunnelCategory:
          "$ref": "#/components/schemas/TunnelCategory"
        axleCount:
          description: |
            The value that specifies the total number of axles the vehicle has, i.e., axles on the base vehicle and any attached trailers.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 2
          maximum: 255
        trailerAxleCount:
          description: |
            The value that specifies the total number of axles across all the trailers attached to the vehicle.
            This number is included in `axleCount`, hence `trailerAxleCount` must be less than `axleCount`.

            **Limitations:** only valid for `transportMode=truck`, `trailerCount` > 0 and `axleCount` > 1.

            Note: This parameter is currently used only for the calculation of tolls in regions where it is applicable.
          type: integer
          format: int32
          minimum: 1
        tiresCount:
          description: |
            The value that specifies the total number of tires the vehicle has, i.e., the tires on the base vehicle and any attached trailers.

            Note: This parameter is currently used only for the calculation of tolls in regions where it is applicable.
          type: integer
          format: int32
          minimum: 1
          maximum: 255
        category:
          description: |
            Specifies the category of the vehicle. The supported values are:

            * `undefined`: The vehicle category is undefined, and no special considerations are taken into
              account. Vehicle routing will proceed as normal.
            * `lightTruck`: The vehicle is a truck light enough to be classified more as a car than as a truck.
              This exempts it from many legal restrictions for normal trucks. However, restrictions related to the physical dimensions of the truck or its cargo still apply.

              For more details, refer to [Truck Categories](https://developer.here.com/documentation/routing-api/dev_guide/topics/truck-routing/truck-routing.html).

              **Limitations:** only valid for `transportMode=truck`.
          type: string
          enum:
          - undefined
          - lightTruck
          default: undefined
        trailerCount:
          description: |
            The number of trailers attached to the vehicle.

            **Limitations:** only valid for `transportMode=truck`.
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          default: 0
        hovOccupancy:
          description: |
            The number of occupants in the vehicle, defined as individuals occupying a seat with a restraint device.
            This value affects the ability of the router to use HOV (High-Occupancy Vehicles) restricted lanes.

            Limitations:
              * Currently, any value over 1 is interpreted as the ability to use any HOV lane, including those restricted to 3+ passengers.
          type: integer
          minimum: 1
          default: 1
        licensePlate:
          description: |
            Specifies the information about the vehicle's license plate number.
            This information is used to evaluate whether certain vehicle restrictions in environmental zones apply.
            Currently, only the last character of the license plate can be provided.

            Format: `lastCharacter:{character}`

            Example: `lastCharacter:2`
          type: string
        speedCap:
          description: |
            Specifies the maximum speed, in meters per second (m/s), that the user wishes not to exceed.
            This parameter affects the route's estimated time of arrival (ETA) and consumption calculation.

            Limitations:
              * valid for following transport modes: `car`, `truck`, `scooter`, `taxi`, `bus`, and `privateBus`

            Notes:
              * Car and Truck mode updates route ETA.
              * Scooter mode updates route optimization and ETA.
          type: number
          minimum: 1.0
          maximum: 70.0
        engineSizeCc:
          description: |
            Specifies the engine size of the vehicle in cubic centimeters.
            Currently, the value is used only in scooter mode.
            This parameter is utilized to determine if the scooter can be classified as a moped.
            Scooters with an engine size less than 51cc are considered mopeds.
            **Alpha**: This API is in development. It may not be stable and is subject to change. It may have no impact on response.
          type: integer
          minimum: 0
          maximum: 2000
        occupancy:
          description: |
            The number of occupants on the vehicle, defined as individuals occupying a seat.
            This value affects the ability of the router to use HOV (High-Occupancy Vehicles) restricted lanes.
            This parameter also affects scooter occupancy restrictions.
            **Alpha**: This API is in development. It may not be stable and is subject to change. It may have no impact on response.

            Limitations:
              * Currently, any value over 1 is interpreted as the ability to use any HOV lane, including those restricted to 3+ passengers.

            **Note:**: This parameter can't be used with 'vehicle[hovOccupancy]'.
          type: integer
          minimum: 1
          default: 1
        type:
          "$ref": "#/components/schemas/VehicleType"
    VehicleNoticeDetail:
      description: Details attached to notices in vehicle section.
      oneOf:
      - "$ref": "#/components/schemas/VehicleRestriction"
      - "$ref": "#/components/schemas/ViolatedTransportMode"
      - "$ref": "#/components/schemas/ViolatedTruckRoadType"
      - "$ref": "#/components/schemas/ViolatedZoneReference"
      discriminator:
        propertyName: type
        mapping:
          restriction: "#/components/schemas/VehicleRestriction"
          violatedTransportMode: "#/components/schemas/ViolatedTransportMode"
          truckRoadType: "#/components/schemas/ViolatedTruckRoadType"
          zoneReference: "#/components/schemas/ViolatedZoneReference"
    VehicleSpan:
      description: 'Span attached to a `Section` that describes the vehicle content.

'
      properties:
        offset:
          description: 'Offset of a coordinate in the section''s polyline.

'
          type: integer
          format: int32
          minimum: 0
        length:
          description: 'Length of the span.

'
          allOf:
          - "$ref": "#/components/schemas/Distance"
        duration:
          description: Duration of the span.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        streetAttributes:
          description: |
            `StreetAttributes` is applied to a span of a route section and describes attribute flags of a street. The following flags can be assigned:
            * `rightDrivingSide`: Vehicles must drive on the right-hand side of the road in this part of the route.
            * `dirtRoad`: This part of the route has an unpaved surface, such as a gravel or dirt road.
            * `tunnel`: This part of the route passes through a tunnel.
            * `bridge`: This part of the route crosses a bridge.
            * `ramp`: This part of the route is a ramp, typically connecting to or from highways.
            * `motorway`: This part of the route is a controlled access road, typically a highway with motorway signage.
            * `roundabout`: This part of the route includes a roundabout.
            * `underConstruction`: This part of the route is currently under construction.
            * `dividedRoad`: This part of the route uses a road with a physical or legal divider in the middle, separating opposing traffic flows.
            * `privateRoad`: This part of the route uses a privately owned road.
            * `controlledAccessHighway`: This part of the route is either a controlled access road, limited access road, or both.
            * `builtUpArea`: This part of the route most likely passes through a built-up area.

            It is possible that new street-attributes may be supported in the future. When encountering unknown street-attributes, e.g., in the software parser, it is recommended to ignore them.
          type: array
          items:
            "$ref": "#/components/schemas/StreetAttributes"
        walkAttributes:
          type: array
          description: |
            The following attribute flags are used to describe accessibility and walk-related features along a route:

            * `stairs`: This part of the route includes a staircase that needs to be climbed or descended.
            * `park`: This part of the route is located within a park or park-like area.
            * `indoor`: This part of the route is inside a venue or building.
            * `open`: This part of the route is open and accessible for walking.
            * `noThrough`: This part of the route can only be traversed if the origin, destination, or any via waypoint is located there. In other words, it is not a through-route.
            * `tollRoad`: Access to this part of the route is restricted and requires the payment of a fee or toll.

            It is possible that new street-attributes may be supported in the future. When encountering unknown street-attributes, e.g., in the software parser, it is recommended to ignore them.
          items:
            "$ref": "#/components/schemas/WalkAttributes"
        carAttributes:
          description: |
            Car-specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describe access flags specific to cars. The following flags can be assigned:
            * `open`: This part of the route is open and accessible to cars.
            * `noThrough`: This part of the route can only be traversed by cars if the origin, destination, or any via waypoint is located there. It is not a through-route for cars.
            * `tollRoad`: This part of the route is a toll road, which means access is restricted for cars and requires the payment of a fee or toll.

            It is possible that new street-attributes may be supported in the future. When encountering unknown street-attributes, e.g., in the software parser, it is recommended to ignore them.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        truckAttributes:
          description: |
            Truck-specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describe access flags specific to trucks. These flags indicate the accessibility and restrictions for trucks along the route. The following flags can be assigned:
            * `open`: This part of the route is open and accessible to trucks.
            * `noThrough`: That this part of the route can only be traversed by trucks if the origin, destination, or any via waypoint is located there. It is not a through-route for trucks.
            * `tollRoad`: This part of the route is a toll road, which means access is restricted for trucks and requires the payment of a fee or toll.

            It is possible that new street-attributes may be supported in the future. When encountering unknown street-attributes, e.g., in the software parser, it is recommended to ignore them.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        scooterAttributes:
          description: |
            Scooter-specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describe access flags specific to scooters. These flags indicate the accessibility of streets for scooters along the route. The following flag can be assigned:
            * `open`: Indicates that this part of the route is open and accessible to scooters.

            It is possible that new street-attributes may be supported in the future. When encountering unknown street-attributes, e.g., in the software parser, it is recommended to ignore them.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        tollSystems:
          description: 'The toll systems applicable to specific spans are described
            using an array of reference indexes. These indexes correspond to the `tollSystems`
            array in the enclosing section. Please note that toll information is not
            static and can vary based on factors such as transport-mode, time-of-day,
            etc. Therefore, the tolls applicable to a span may change in similar requests.

'
          type: array
          items:
            type: integer
        names:
          description: Designated name for the span, e.g., a street name or a transport
            name.
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        routeNumbers:
          description: Designated route name or number of the span, e.g., 'M25')
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedRouteNumber"
        countryCode:
          "$ref": "#/components/schemas/CountryCode"
        stateCode:
          "$ref": "#/components/schemas/StateCode"
        functionalClass:
          "$ref": "#/components/schemas/FunctionalClass"
        speedLimit:
          description: "**NOTE:** The attribute `speedLimit` is deprecated and should
            be replaced with `maxSpeed`.\n"
          allOf:
          - "$ref": "#/components/schemas/Speed"
        maxSpeed:
          "$ref": "#/components/schemas/MaxSpeed"
        dynamicSpeedInfo:
          "$ref": "#/components/schemas/DynamicSpeedInfo"
        segmentId:
          description: "\n**NOTE:** The attribute `segmentId` is deprecated and should
            be replaced with `segmentRef`.\n\nThe directed topology segment id, including
            prefix, e.g., '+here:cm:segment:'. The id consists of two parts \n* The
            direction, represented by either '+' or '-'.\n* The topology segment id
            (a unique identifier within the HERE platform catalogs).\n\nThe direction
            specifies whether the route is using the segment in its canonical direction
            ('+' also known as traveling along the geometry's direction), or against
            it ('-' also known as traveling against the geometry's direction).\n"
          type: string
          deprecated: true
        segmentRef:
          "$ref": "#/components/schemas/SegmentRef"
        consumption:
          description: |
            The estimated net energy or fuel consumption along a span of the route is provided based on the `consumptionType` of the section. The value represents either net energy consumption or fuel consumption. Here are the units used for different vehicle types:
            * For electric vehicles (EVs): The energy consumption is measured in kilowatt-hours (kWh). This indicates the amount of energy consumed by the EV while traversing the specific span.
            * For fuel-based vehicles: Depending on the fuel type, the fuel consumption is measured in liters (for diesel, petrol vehicles, and vehicles using liquefied petroleum gas (LPG)), and in kilograms (for vehicles using compressed natural gas (CNG)).
          allOf:
          - "$ref": "#/components/schemas/Consumption"
        baseDuration:
          description: |
            The duration of this span, specified in seconds, without taking time-aware information into account.

            Dynamic traffic information is not considered. The duration is calculated using average free-flow speeds based on historical traffic, without taking into account the current traffic conditions.

            The `baseDuration` represents the best possible duration for the route section.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        typicalDuration:
          description: |
            The duration of this span, specified in seconds, under typical traffic conditions.

            Dynamic traffic information is not considered. Instead, the duration is calculated using speeds that are typical for the given time of day/day of week, based on historical traffic data.

            **Note:** Will be the same as `baseDuration` if `traffic[mode]=disabled` is specified.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        incidents:
          description: |
            A list of indexes into the incident array of the parent section.
            References all incidents that apply to the span.
            This requires `incidents` to be specified as part of the `return` parameter.
          type: array
          items:
            type: integer
        routingZones:
          description: |
            A list of indexes into the routing zone array of the parent section.
            References all applicable routing zones to the span.
          type: array
          items:
            type: integer
        truckRoadTypes:
          description: A list of indexes into the truck road types array of the parent
            section. References all applicable truck road types to the span.
          type: array
          items:
            type: integer
        gate:
          description: Indication that a gate is present at the end of this span.
          allOf:
          - "$ref": "#/components/schemas/Gate"
        railwayCrossing:
          description: Indication that a railway crossing is present at the end of
            this span.
          allOf:
          - "$ref": "#/components/schemas/RailwayCrossing"
        notices:
          description: |
            A list of indexes into the notices array of the parent section.
            References all notices that apply to the span.

            Depending on the notice type the notice might apply to the whole span, or only at the end of the span. Notices that only apply at the end of the span are:

            | Code      | Description  |
            | --------- | ------- |
            | violatedTurnRestriction | A restricted turn is performed at the end of the span |
            | violatedAvoidDifficultTurns | A difficult turn is performed at the end of the span |
            | violatedAvoidUTurns | A U-turn is performed at the end of the span |
            | violatedEmergencyGate | An emergency gate is crossed at the end of the span |
          type: array
          items:
            type: integer
    VehicleTransport:
      description: Information about a transport
      properties:
        mode:
          "$ref": "#/components/schemas/VehicleMode"
      required:
      - mode
    WebLinkWithDeviceType:
      description: The URL address to an external resource.
      properties:
        id:
          description: Unique identifier for the web link. It is used to deduplicate
            links defined in multiple sections.
          type: string
        href:
          "$ref": "#/components/schemas/Uri"
        text:
          description: Text describing the url address (e.g. The example website).
          type: string
        hrefText:
          description: 'The interactive (or clickable) portion of the text. If not
            present (default), the entire content of the text attribute will be considered.

'
          type: string
        deviceType:
          description: "Extensible enum: `web` `ios` `android` `...`  \nDevice type
            for which the link is intended\n"
          type: string
          x-extensible-enum:
          - web
          - ios
          - android
      required:
      - id
      - text
    EV:
      description: |
        EV parameters to be used for calculating consumption and for calculating EV routes with
        automatically added charging stations.

        The following attributes are required for calculating consumption:
        * `freeFlowSpeedTable`

        The following attributes are additionally required in order to calculate reachable routes:

        * `initialCharge`
        * `maxCharge`
        * `connectorTypes`
        * `chargingCurve`
        * `maxChargeAfterChargingStation`
        * `makeReachable` set to `true`

        All remaining attributes are optional.

        **NOTE:** We do not support hybrid vehicles (EV + Other fuel types). Consumption parameters are not supported for combination of
        `ev` and `fuel` vehicles.
      type: object
      properties:
        freeFlowSpeedTable:
          allOf:
          - "$ref": "#/components/schemas/ConsumptionSpeedTable"
        trafficSpeedTable:
          description: |
            Function curve specifying consumption rate at a given traffic-reduced speed on a flat stretch of road.

            See `freeFlowSpeedTable` for a description of the string format.
          allOf:
          - "$ref": "#/components/schemas/ConsumptionSpeedTable"
        ascent:
          description: 'Rate of energy consumed per meter rise in elevation (in Wh/m,
            i.e., Watt-hours per meter).

'
          type: number
          minimum: 0
        descent:
          description: 'Rate of energy recovered per meter fall in elevation (in Wh/m,
            i.e., Watt-hours per meter).

'
          type: number
          minimum: 0
        auxiliaryConsumption:
          description: |
            Rate of energy (in Wh/s) consumed by the vehicle's auxiliary systems (for example, air conditioning, lights).
            The value represents the number of Watt-hours consumed per second of travel.
          type: number
          minimum: 0
        initialCharge:
          description: |
            Charge level of the vehicle's battery at the start of the route (in kWh).
            Value must be less than or equal to the value of `maxCharge`.
          type: number
          minimum: 0
        maxCharge:
          description: 'Total capacity of the vehicle''s battery (in kWh).

'
          type: number
          minimum: 0
        chargingCurve:
          description: |
            Function curve describing the maximum battery charging rate (in kW) at a given charge level (in kWh).

            The format of the string is a comma-separated list of numbers, as follows:

            ```
            <CHARGE_0>,<RATE_0>,<CHARGE_1>,<RATE_1>,...,<RATE_N>,<CHARGE_N>
            ```

            where charge values are strictly increasing, non-negative floating-point values in units
            of (kWh), and rate values are positive floating point values in units of (kW).

            Charge values must cover the entire range of `[0, maxChargeAfterChargingStation`]. The
            charging curve is piecewise constant, e.g., for any charge in the range `[CHARGE_0,
            CHARGE_1)`, the value of the function is `RATE_0`.

            The algorithm calculates a route as the best possible combination of driving and charging
            parts and uses the charging curve to evaluate the most efficent range of
            charging. For example, if the rate of charging is high at lower levels of battery, but slows down significantly after charging a little, stopping
            often and charging less, but quicker, at each station might be better for the overall route.
            Because batteries lose charging speed with use, providing a charging curve for the
            exact battery would give more accurate charging time estimate than providing a
            generic curve for all batteries of one type.
          type: string
          example: 0,207,28.761,207,29.011,173,43.493,173,43.743,145,51.209,145,51.459,113,56.120,113,56.370,87,80.0,10
        maxChargingVoltage:
          description: 'Maximum charging voltage supported by the vehicle''s battery
            (in Volt).

'
          type: number
          minimum: 0
        maxChargingCurrent:
          description: 'Maximum charging current supported by the vehicle''s battery
            (in Ampere).

'
          type: number
          minimum: 0
        maxChargeAfterChargingStation:
          description: |
            Maximum charge to which the battery should be charged at a charging station (in kWh).
            Value must be less than or equal to the value of `maxCharge`.

            The algorithm calculates a route as the best possible combination of driving and charging
            parts so charging at a charging station does not happen strictly to the value of
            this parameter. Instead, the algorithm attempts to leave every station with
            different charge levels, and only the best possible combination of charging stations
            and target charge will form the final route.

            For example, if there is a fast but not reachable charging station on the route,
            the algorithm prefers first to charge at a slower station, but only to a level that enables it
            to reach the fast station. This way it calculates the best possible combination of driving
            and charging parts.
          type: number
          minimum: 0
        minChargeAtChargingStation:
          description: |
            Minimum charge when arriving at a charging station (in kWh).
            Value must be less than the value of `maxChargeAfterChargingStation`.

            The algorithm calculates a route as the best possible combination of driving and charging
            parts so visiting a charging station is planned not when the remaining charge is close
            to the value of this parameter but when it is part of the best possible charging
            plan for the given route.

            For example, it might prefer charging a still half-full battery at the fast charging station because
            there are only slower stations later on the route and the remaining charge is not
            enough to reach the destination without charging at all.
          type: number
          minimum: 0
        minChargeAtFirstChargingStation:
          description: |
            Minimum charge when arriving at first charging station (in kWh).
            Value must be less than the value of `maxChargeAfterChargingStation`.

            This overrides `minChargeAtChargingStation` for the first charging station. If not specified, `minChargeAtChargingStation`
            will be used for all charging stations, including the first one.

            This is usually used when the current charge is too low to reach a charging station within `minChargeAtChargingStation` limits.
          type: number
          minimum: 0
        minChargeAtDestination:
          description: |
            Minimum charge at the final route destination (in kWh).
            Value must be less than the value of `maxChargeAfterChargingStation`.

            The algorithm calculates a route as the best possible combination of driving and charging
            parts while making sure that the actual value of the charge at the destination would be close to the
            value of this parameter. I.e., the resulting value is expected to be bigger
            than this parameter's value by no more than 10% of the battery capacity.
          type: number
          minimum: 0
        chargingSetupDuration:
          description: |
            Time spent (in seconds) after arriving at a charging station but before actually charging
            (for example, time spent for payment processing).
          type: integer
          format: int32
          minimum: 0
        connectorTypes:
          description: |
            Comma-separated list of connector types that are compatible with the vehicle. If `makeReachable` is set to `true`,
            then only stations with any of these connector types will be evaluated as a potential charging stop.
            For stations with multiple compatible connectors, the charging time is based on the connector type with the highest power rating among them.

            Currently supported connector types are:
              * `iec62196Type1Combo`:  Type 1 Combo connector, commonly called "SAE J1772"
              * `iec62196Type2Combo`:  Type 2 Combo connector, commonly called "Mennekes"
              * `chademo`: CHAdeMO connector
              * `tesla`: Tesla connector
          type: string
          example: iec62196Type1Combo,chademo
        makeReachable:
          description: |
            When set to `true`, the router ensures that the calculated route is reachable within the given constraints
            (i.e., `minChargeAtChargingStation`, `minChargeAtDestination`). If necessary, charging stations are added to the route
            to achieve reachability.

            The following conditions must be met in order to enable this option:
            * `transportMode=car`
            * `routingMode=fast`
            * `avoid` options requested, if any, should only be from `tollRoad`, `ferry`, `controlledAccessHighway`, `carShuttleTrain`, `tunnel`, `dirtRoad`.
            Avoid `controlledAccessHighway` and `tollRoad` options are limited to 300km air distance between 2 subsequent waypoints.
          type: boolean
        preferredBrands:
          description: |
            Comma-separated list of charging station brand IDs. If `makeReachable` is set to `true`, then charging stations from the specified brands
            will be preferred as potential charging stops, even if this makes the total route duration (travel time plus charging time) longer (up to 15 minutes per charging stop).
          type: string
      required:
      - freeFlowSpeedTable
    FarePrice:
      description: Price of a fare
      discriminator:
        propertyName: type
        mapping:
          value: "#/components/schemas/SinglePrice"
          range: "#/components/schemas/RangePrice"
      oneOf:
      - "$ref": "#/components/schemas/SinglePrice"
      - "$ref": "#/components/schemas/RangePrice"
    Passthrough:
      description: Describes a location and time the section is passing through.
      properties:
        place:
          "$ref": "#/components/schemas/Place"
        offset:
          description: Passthrough offsets are the coordinate index in the polyline.
          type: number
      required:
      - place
    SignpostInfo:
      description: 'Signpost information attached to an offset action.

'
      properties:
        labels:
          description: 'Part of a signpost representing particular direction or destination.

'
          type: array
          items:
            "$ref": "#/components/schemas/SignpostLabel"
      required:
      - labels
      example:
        "$ref": "#/components/examples/routeResponseManeuverSignpostInfoExample"
    TimeRestrictedPrice:
      properties:
        type:
          description: |
            Type of price represented by this object. The API customer is responsible for correctly visualizing
            the pricing model. As it is possible to extend the supported price types in the future,
            the price information should be hidden when an unknown type is encountered.

            Available price types are:

              * `restricted` - A single price value valid for a specific time or duration
          type: string
        estimated:
          description: Attribute value is `true` if the fare price is estimated, `false`
            if it is an exact value.
          type: boolean
          default: false
        currency:
          description: Local currency of the price compliant to ISO 4217
          type: string
        unit:
          description: |
            When set, the price is paid for a specific duration.

            Examples:
              * `"unit": 3600` - price for one hour
              * `"unit": 28800` - price for 8 hours
              * `"unit": 86400` - price for one day
          allOf:
          - "$ref": "#/components/schemas/Duration"
        value:
          description: The price value
          type: number
        days:
          description: This price applies only for the selected days
          type: array
          items:
            "$ref": "#/components/schemas/TimeRestrictedWeekdays"
          example:
          - sa
          - su
        minDuration:
          description: The price applies if the duration is more or equal to `minDuration`
          allOf:
          - "$ref": "#/components/schemas/Duration"
          example: 1801
        maxDuration:
          description: The price applies if the duration is less or equal to `maxDuration`
          allOf:
          - "$ref": "#/components/schemas/Duration"
          example: 3600
        fromTime:
          description: The price applies from this time of the day
          allOf:
          - "$ref": "#/components/schemas/PartialTime"
        toTime:
          description: The price applies until this time of the day
          allOf:
          - "$ref": "#/components/schemas/PartialTime"
      required:
      - type
      - currency
      - value
    TransitDeparture:
      description: Transit departure
      properties:
        time:
          description: Expected time of departure of the event. Format is **RFC 3339**,
            section 5.6 as defined by `date-time`.
          allOf:
          - "$ref": "#/components/schemas/Time"
        place:
          description: Departure/arrival location
          allOf:
          - "$ref": "#/components/schemas/StationPlace"
        delay:
          description: The accumulated delay in seconds from the scheduled time of
            the event.
          allOf:
          - "$ref": "#/components/schemas/DepartureDelay"
        status:
          "$ref": "#/components/schemas/DepartureStatus"
      required:
      - place
    TransitPostAction:
      oneOf:
      - "$ref": "#/components/schemas/DeboardAction"
      discriminator:
        propertyName: action
        mapping:
          deboard: "#/components/schemas/DeboardAction"
    TransitPreAction:
      description: An action that must be done prior to `departure`.
      discriminator:
        propertyName: action
        mapping:
          board: "#/components/schemas/BoardAction"
      oneOf:
      - "$ref": "#/components/schemas/BoardAction"
    VehicleNotice:
      example:
        "$ref": "#/components/examples/noticeWithRestrictionsExample"
      description: A notice contains important notifications.
      properties:
        title:
          type: string
          description: Human-readable notice description.
          example: Violated avoid toll road
        code:
          type: string
          description: "Extensible enum: `violatedAvoidControlledAccessHighway` `violatedAvoidTollRoad`
            `violatedAvoidTunnel` `violatedAvoidDirtRoad` `violatedBlockedRoad` `violatedStartDirection`
            `violatedCarpool` `violatedTurnRestriction` `violatedVehicleRestriction`
            `violatedZoneRestriction` `violatedAvoidDifficultTurns` `violatedAvoidUTurns`
            `violatedEmergencyGate` `violatedAvoidSeasonalClosure` `violatedAvoidTollTransponder`
            `violatedAvoidZone` `violatedAvoidTruckRoadType` `seasonalClosure` `tollTransponder`
            `mlDurationUnavailable` `simplePolyline` `tollsDataUnavailable` `chargingStopNotNeeded`
            `...`  \nCurrently known codes (non-exhaustive: this list could be extended
            for new situations):\n\n| Code      | Description  | Severity |\n| ------            | ------- | ------- |\n| violatedAvoidControlledAccessHighway | Route
            did not manage to avoid user preference | critical |\n| violatedAvoidTollRoad
            | Route did not manage to avoid user preference | critical |\n| violatedAvoidTunnel
            | Route did not manage to avoid user preference | critical |\n| violatedAvoidDirtRoad
            | Route did not manage to avoid user preference | critical |\n| violatedBlockedRoad
            | Route uses roads blocked by traffic events | critical |\n| violatedStartDirection
            | Start direction of the route is not as requested | critical |\n| violatedCarpool
            | Route did not manage to avoid user preference | critical |\n| violatedTurnRestriction
            | Route uses a time-restricted turn | critical |\n| violatedVehicleRestriction
            | Route uses a road which is forbidden for the given vehicle profile |
            critical |\n| violatedZoneRestriction | Route uses a road which is part
            of restricted routing zones | critical |\n| violatedAvoidDifficultTurns
            | Route did not manage to avoid user preference | critical |\n| violatedAvoidUTurns
            | Route did not manage to avoid user preference | critical |\n| violatedEmergencyGate
            | Route goes through an emergency gate | critical |\n| violatedAvoidSeasonalClosure
            | Route did not manage to avoid seasonal closure | critical |\n| violatedAvoidTollTransponder
            | Route did not manage to avoid toll booth that requires transponder |
            critical |\n| violatedAvoidZone | Route did not manage to avoid zone |
            critical |\n| violatedAvoidTruckRoadType | Route did not manage to avoid
            truck road type | critical |\n| seasonalClosure | Route goes through seasonal
            closure | info |\n| tollTransponder | Route goes through toll booth that
            requires transponder | info |\n| mlDurationUnavailable | Machine learning
            duration was requested but is not available for this section | info |\n|
            simplePolyline | An accurate polyline is not available for this section.
            The returned polyline has been generated from departure and arrival places.
            | info |\n| tollsDataUnavailable | Tolls data was requested but could
            not be calculated for this section | info |\n| chargingStopNotNeeded |
            A charging stop was planned at the destination of this section, but it
            is no longer needed (getRoutesByHandle requests only) | info |\n"
          example: violatedAvoidTollRoad
          x-extensible-enum:
          - violatedAvoidControlledAccessHighway
          - violatedAvoidTollRoad
          - violatedAvoidTunnel
          - violatedAvoidDirtRoad
          - violatedBlockedRoad
          - violatedStartDirection
          - violatedCarpool
          - violatedTurnRestriction
          - violatedVehicleRestriction
          - violatedZoneRestriction
          - violatedAvoidDifficultTurns
          - violatedAvoidUTurns
          - violatedEmergencyGate
          - violatedAvoidSeasonalClosure
          - violatedAvoidTollTransponder
          - violatedAvoidZone
          - violatedAvoidTruckRoadType
          - seasonalClosure
          - tollTransponder
          - mlDurationUnavailable
          - simplePolyline
          - tollsDataUnavailable
          - chargingStopNotNeeded
        severity:
          "$ref": "#/components/schemas/NoticeSeverity"
        details:
          type: array
          description: Additional details about the notice
          items:
            "$ref": "#/components/schemas/VehicleNoticeDetail"
      required:
      - code
    Fare:
      description: "`Fare` type contains information about a single fare or ticket
        needed for this section of the route."
      properties:
        id:
          description: Unique Fare id. Used to deduplicate fares that apply to multiple
            sections
          type: string
        name:
          description: Name of a fare
          type: string
        price:
          "$ref": "#/components/schemas/FarePrice"
        convertedPrice:
          "$ref": "#/components/schemas/FarePrice"
        reason:
          default: ride
          allOf:
          - "$ref": "#/components/schemas/FareReason"
        paymentMethods:
          description: 'Specifies the payment methods for which this fare is valid.

'
          type: array
          items:
            "$ref": "#/components/schemas/PaymentMethod"
          minItems: 1
          uniqueItems: true
        pass:
          "$ref": "#/components/schemas/FarePass"
      required:
      - id
      - name
      - price
    OffsetAction:
      description: |
        An action to be performed at or during a specific portion of a section.

        * `depart`: departure maneuver, such as "Start at"
        * `arrive`: arrival maneuver, such as "Arrive at"
        * `continue`: continue maneuver, such as "Continue on"
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
        offset:
          description: Offset of a coordinate in the section's polyline.
          type: integer
        length:
          description: Estimated length of this action (in meters). Actions extend
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Distance"
        currentRoad:
          description: Attributes of the current road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        nextRoad:
          description: Attributes of the next road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        exitSign:
          description: Attributes of the road exit
          allOf:
          - "$ref": "#/components/schemas/ExitInfo"
        signpost:
          description: Signpost information of the action, provided for turn by turn
            actions only
          allOf:
          - "$ref": "#/components/schemas/SignpostInfo"
      required:
      - action
      - duration
    ParkingLotPlace:
      description: A parking lot
      properties:
        name:
          description: Location name
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        id:
          description: Identifier of this parking lot
          type: string
        attributes:
          type: array
          description: Attributes of a parking lot.
          items:
            "$ref": "#/components/schemas/ParkingLotPlaceType"
        rates:
          description: 'List of possible parking rates for this facility. Different
            rates can apply depending on the day, time of the day or parking duration.

'
          type: array
          items:
            "$ref": "#/components/schemas/TimeRestrictedPrice"
      required:
      - type
      - location
      example:
        type: place
        location:
          lat: 50.339167
          lng: 18.93
    TollCountrySummary:
      properties:
        countryCode:
          "$ref": "#/components/schemas/CountryCode"
        price:
          "$ref": "#/components/schemas/FarePrice"
    TollSystemSummary:
      properties:
        tollSystem:
          description: 'Reference index into the `tollSystems` array of the containing
            section.

'
          type: integer
        price:
          "$ref": "#/components/schemas/FarePrice"
    TransitStop:
      description: A transit stop of the route
      properties:
        departure:
          "$ref": "#/components/schemas/TransitDeparture"
        duration:
          description: Stop duration. If not set the vehicle departs as soon as people
            are on board.
          type: integer
          example: 198
          default: 0
        attributes:
          description: "**NOTE:** As it is possible that new attributes are supported
            in the future, unknown attributes should be ignored.\n"
          type: array
          items:
            "$ref": "#/components/schemas/TransitStopAttributes"
      required:
      - departure
    ArriveAction:
      allOf:
      - "$ref": "#/components/schemas/OffsetAction"
    ContinueAction:
      description: |
        An action to be performed at or during a specific portion of a section.

        * `depart`: departure maneuver, such as "Start at"
        * `arrive`: arrival maneuver, such as "Arrive at"
        * `continue`: continue maneuver, such as "Continue on"
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
        offset:
          description: Offset of a coordinate in the section's polyline.
          type: integer
        length:
          description: Estimated length of this action (in meters). Actions extend
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Distance"
        currentRoad:
          description: Attributes of the current road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        nextRoad:
          description: Attributes of the next road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        exitSign:
          description: Attributes of the road exit
          allOf:
          - "$ref": "#/components/schemas/ExitInfo"
        signpost:
          description: Signpost information of the action, provided for turn by turn
            actions only
          allOf:
          - "$ref": "#/components/schemas/SignpostInfo"
        intersectionName:
          description: Name of the intersection where the turn takes place, if available.
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
      required:
      - action
      - duration
    DepartAction:
      allOf:
      - "$ref": "#/components/schemas/OffsetAction"
    PedestrianPlace:
      description: Place used in pedestrian routing
      oneOf:
      - "$ref": "#/components/schemas/Place"
      - "$ref": "#/components/schemas/StationPlace"
      - "$ref": "#/components/schemas/AccessPointPlace"
      - "$ref": "#/components/schemas/ParkingLotPlace"
      - "$ref": "#/components/schemas/ChargingStationPlace"
      - "$ref": "#/components/schemas/DockingStationPlace"
      discriminator:
        propertyName: type
        mapping:
          place: "#/components/schemas/Place"
          station: "#/components/schemas/StationPlace"
          accessPoint: "#/components/schemas/AccessPointPlace"
          parkingLot: "#/components/schemas/ParkingLotPlace"
          chargingStation: "#/components/schemas/ChargingStationPlace"
          dockingStation: "#/components/schemas/DockingStationPlace"
    PedestrianPostAction:
      oneOf:
      - "$ref": "#/components/schemas/OffsetAction"
      discriminator:
        propertyName: action
        mapping:
          wait: "#/components/schemas/OffsetAction"
    TollCost:
      description: 'Information for a single toll payment.

'
      properties:
        tollSystem:
          description: 'The name of the toll system collecting the toll.

'
          type: string
          deprecated: true
        tollSystemRef:
          description: 'Reference index of the affected toll system in the `tollSystems`
            array.

'
          type: integer
        countryCode:
          "$ref": "#/components/schemas/CountryCode"
        tollCollectionLocations:
          description: 'The toll places represent the location(s) where the fare is
            collected. For tolls measured by distance, both the entry and exit toll
            locations are returned. It''s important to note that while both entry
            and exit toll locations are provided, the payment is typically made at
            only one of these places, which is usually the exit toll location.

'
          type: array
          items:
            "$ref": "#/components/schemas/TollCollectionLocation"
        fares:
          description: |
            The list of possible `Fare`s represents the various fares that may apply for the tolls. The specific fares can vary based on factors such as the time of day, payment method, and vehicle characteristics.

            **Note**: The router presents the relevant fare options based on the original query, on a best effort basis.
            The `Fare` object for tolls will always be of type `SinglePrice`, indicating a single price for the toll.
          type: array
          items:
            "$ref": "#/components/schemas/Fare"
      required:
      - tollSystem
      - tollSystemRef
      - fares
    TollSummary:
      description: 'The summary of the tolls grouped by criteria (total, per system,
        per country).

'
      properties:
        total:
          description: 'Represents the overall sum of toll fees for the entire route
            or section. It provides the aggregated amount of toll charges without
            further breakdown.

'
          allOf:
          - "$ref": "#/components/schemas/FarePrice"
        totalBySystem:
          description: 'Categorizes toll fees based on the different toll systems
            applicable along the route or section. Each toll system has its own set
            of charges and payment rules. The summary provides a breakdown of toll
            costs for each individual toll system encountered.

'
          type: array
          items:
            "$ref": "#/components/schemas/TollSystemSummary"
        totalByCountry:
          description: 'Groups toll fees based on the countries traversed during the
            route or section. It provides a breakdown of toll charges specific to
            each country.

'
          type: array
          items:
            "$ref": "#/components/schemas/TollCountrySummary"
    TurnAction:
      description: |
        An action in which a direction change is made.

        * `ramp`: ramp maneuver, such as "Take the left ramp onto"
        * `roundaboutPass`: Going straight on a roundabout maneuver
        * `roundaboutEnter`: Arriving at a destination roundabout maneuver
        * `uTurn`: u-turn maneuver, such as "Make a right U-turn at"
        * `turn`: turn maneuver, such as "Make a sharp right turn at"
        * `keep`: a maneuver following a fork, such as "Take the middle fork onto"
        * `enterHighway`: a maneuver to enter a highway, used for turn-by-turn guidance only
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
        offset:
          description: Offset of a coordinate in the section's polyline.
          type: integer
        length:
          description: Estimated length of this action (in meters). Actions extend
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Distance"
        currentRoad:
          description: Attributes of the current road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        nextRoad:
          description: Attributes of the next road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        exitSign:
          description: Attributes of the road exit
          allOf:
          - "$ref": "#/components/schemas/ExitInfo"
        signpost:
          description: Signpost information of the action, provided for turn by turn
            actions only
          allOf:
          - "$ref": "#/components/schemas/SignpostInfo"
        intersectionName:
          description: Name of the intersection where the turn takes place, if available.
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        direction:
          description: 'Note that the direction of a turn has a special meaning for
            "roundaboutEnter": It indicates the direction in which one drives around
            the roundabout (left for left-hand-side driving countries, right for right-hand-side
            ones).

'
          allOf:
          - "$ref": "#/components/schemas/TurnActionDirection"
        severity:
          "$ref": "#/components/schemas/TurnActionSeverity"
        turnAngle:
          "$ref": "#/components/schemas/TurnAngle"
      required:
      - action
      - duration
    VehiclePlace:
      description: Place used in vehicle routing.
      oneOf:
      - "$ref": "#/components/schemas/Place"
      - "$ref": "#/components/schemas/StationPlace"
      - "$ref": "#/components/schemas/AccessPointPlace"
      - "$ref": "#/components/schemas/ParkingLotPlace"
      - "$ref": "#/components/schemas/ChargingStationPlace"
      - "$ref": "#/components/schemas/DockingStationPlace"
      discriminator:
        propertyName: type
        mapping:
          place: "#/components/schemas/Place"
          station: "#/components/schemas/StationPlace"
          accessPoint: "#/components/schemas/AccessPointPlace"
          parkingLot: "#/components/schemas/ParkingLotPlace"
          chargingStation: "#/components/schemas/ChargingStationPlace"
          dockingStation: "#/components/schemas/DockingStationPlace"
    VehiclePostAction:
      description: Action attached to a vehicle section that must be done after `arrival`.
      discriminator:
        propertyName: action
        mapping:
          chargingSetup: "#/components/schemas/ChargingSetupAction"
          charging: "#/components/schemas/ChargingAction"
          wait: "#/components/schemas/OffsetAction"
      oneOf:
      - "$ref": "#/components/schemas/ChargingSetupAction"
      - "$ref": "#/components/schemas/ChargingAction"
      - "$ref": "#/components/schemas/OffsetAction"
    ExitAction:
      description: |
        An action to leave a roundabout or highway.

        * `exit`: exit maneuver, such as "Take the left exit to"
        * `roundaboutExit`: roundabout exit maneuver, such as "Take the third exit of the roundabout onto"
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
        offset:
          description: Offset of a coordinate in the section's polyline.
          type: integer
        length:
          description: Estimated length of this action (in meters). Actions extend
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Distance"
        currentRoad:
          description: Attributes of the current road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        nextRoad:
          description: Attributes of the next road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        exitSign:
          description: Attributes of the road exit
          allOf:
          - "$ref": "#/components/schemas/ExitInfo"
        signpost:
          description: Signpost information of the action, provided for turn by turn
            actions only
          allOf:
          - "$ref": "#/components/schemas/SignpostInfo"
        intersectionName:
          description: Name of the intersection where the turn takes place, if available.
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        direction:
          description: 'Note that the direction of a turn has a special meaning for
            "roundaboutEnter": It indicates the direction in which one drives around
            the roundabout (left for left-hand-side driving countries, right for right-hand-side
            ones).

'
          allOf:
          - "$ref": "#/components/schemas/TurnActionDirection"
        severity:
          "$ref": "#/components/schemas/TurnActionSeverity"
        turnAngle:
          "$ref": "#/components/schemas/TurnAngle"
        exit:
          description: Which exit to take next.
          type: integer
          minimum: 1
          maximum: 12
          default: 1
        roundaboutAngle:
          "$ref": "#/components/schemas/RoundaboutAngle"
      required:
      - action
      - duration
    KeepAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    PedestrianDeparture:
      description: Departure of pedestrian
      properties:
        time:
          description: Expected time of departure of the event. Format is **RFC 3339**,
            section 5.6 as defined by `date-time`.
          allOf:
          - "$ref": "#/components/schemas/Time"
        place:
          "$ref": "#/components/schemas/PedestrianPlace"
      required:
      - place
    RampAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    RoundaboutEnterAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    RoundaboutPassAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    TransitSection:
      description: A section of the route. It contains departure, arrival, and route
        information.
      properties:
        id:
          description: Unique identifier of the section
          type: string
        type:
          description: Section type used by the client to identify what extension
            to the BaseSection are available.
          type: string
        preActions:
          description: Actions that must be done prior to `departure`.
          type: array
          items:
            "$ref": "#/components/schemas/TransitPreAction"
        actions:
          description: |
            Actions that must be done during the travel portion of the section, i.e., between `departure` and `arrival`.

            *NOTE:* currentRoad and nextRoad are not populated for actions.
          type: array
          items:
            "$ref": "#/components/schemas/OffsetAction"
        language:
          description: Language of the localized strings in the section, if any, in
            BCP47 format.
          type: string
        postActions:
          description: Actions that must be done after `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/TransitPostAction"
        turnByTurnActions:
          description: Actions for turn by turn guidance during the travel portion
            of the section, i.e., between `departure` and `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/OffsetAction"
        departure:
          "$ref": "#/components/schemas/TransitDeparture"
        arrival:
          "$ref": "#/components/schemas/TransitDeparture"
        passthrough:
          description: |
            List of via waypoints this section is passing through.

            Each via waypoint of the request that is a `passThrough=true` waypoint, appears as a
            `Passthrough` in the response. It appears in the section that starts with the closest
            non-passthrough via specified before it or origin.

            The passthrough vias appear in this list in the order they are traversed. They are
            traversed in the order they are specified in the request.
          type: array
          items:
            "$ref": "#/components/schemas/Passthrough"
        summary:
          description: |
            Total value of key attributes (e.g., duration, length) summed up for the entire section, including `preActions`, `postActions`,
            and the travel portion of the section.
          allOf:
          - "$ref": "#/components/schemas/BaseSummary"
        travelSummary:
          description: |
            Total value of key attributes (e.g., duration, length) summed up for just the travel portion of the section,
            between `departure` and `arrival`. `preActions` and `postActions` are excluded.
          allOf:
          - "$ref": "#/components/schemas/BaseSummary"
        polyline:
          "$ref": "#/components/schemas/Polyline"
        notices:
          description: 'Contains a list of issues related to this section of the route.

'
          type: array
          items:
            "$ref": "#/components/schemas/TransitNotice"
        bookingLinks:
          description: Links to external ticket booking services
          type: array
          items:
            "$ref": "#/components/schemas/WebLinkWithDeviceType"
        transport:
          "$ref": "#/components/schemas/TransitTransport"
        intermediateStops:
          description: 'Intermediate stops between departure and destination of the
            transit line. It can be missing if this information is not available or
            not requested.

'
          type: array
          items:
            "$ref": "#/components/schemas/TransitStop"
        agency:
          "$ref": "#/components/schemas/Agency"
        attributions:
          description: List of required attributions to display.
          type: array
          items:
            "$ref": "#/components/schemas/Attribution"
        fares:
          description: List of tickets to pay for this section of the route
          type: array
          items:
            "$ref": "#/components/schemas/Fare"
        booking:
          description: "**NOTE:** Attribute booking is deprecated. Please, use bookingLinks
            instead of it.\n"
          deprecated: true
          allOf:
          - "$ref": "#/components/schemas/WebLink"
        spans:
          type: array
          description: 'Span attached to a `Section` describing transit content.

'
          items:
            "$ref": "#/components/schemas/TransitSpan"
        incidents:
          description: A list of all incidents that apply to the section.
          type: array
          items:
            "$ref": "#/components/schemas/TransitIncident"
      required:
      - id
      - type
      - departure
      - arrival
    UTurnAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    VehicleDeparture:
      description: Describe a departure or arrival location and time.
      properties:
        time:
          description: Expected time of departure of the event. Format is **RFC 3339**,
            section 5.6 as defined by `date-time`.
          allOf:
          - "$ref": "#/components/schemas/Time"
        place:
          "$ref": "#/components/schemas/VehiclePlace"
        charge:
          description: Vehicle battery charge, specified in kilowatt-hours (kWh).
          type: number
      required:
      - place
    VehicleSummary:
      description: Total value of key attributes for a route section.
      properties:
        duration:
          "$ref": "#/components/schemas/Duration"
        length:
          "$ref": "#/components/schemas/Distance"
        consumption:
          description: |
            The estimated net energy or fuel consumption along a span of the route is provided based on the `consumptionType` of the section. The value represents either net energy consumption or fuel consumption. Here are the units used for different vehicle types:
            * For electric vehicles (EVs): The energy consumption is measured in kilowatt-hours (kWh). This indicates the amount of energy consumed by the EV while traversing the specific span.
            * For fuel-based vehicles: Depending on the fuel type, the fuel consumption is measured in liters (for diesel, petrol vehicles, and vehicles using liquefied petroleum gas (LPG)), and in kilograms (for vehicles using compressed natural gas (CNG)).
          allOf:
          - "$ref": "#/components/schemas/Consumption"
        baseDuration:
          description: |
            The duration, specified in seconds, without taking time-aware information into account.

            Dynamic traffic information is not considered. The duration is calculated using average free-flow speeds based on historical traffic, without taking into account the current traffic conditions.

            The `baseDuration` represents the best possible duration for the route section.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        typicalDuration:
          description: |
            The duration, specified in seconds, under typical traffic conditions.

            Dynamic traffic information is not considered. Instead, the duration is calculated using speeds that are typical for the given time of day/day of week, based on historical traffic data.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        tolls:
          description: |
            The summary of tolls to be paid for this section of the route, grouped according to the criteria specified in the `tolls` parameter.
            This element is included in the response if at least one grouping criteria was requested.
          allOf:
          - "$ref": "#/components/schemas/TollSummary"
        co2Emission:
          description: |
            Estimated CO2 emission for this section of the route. It is calculated based on `fuel[type]` and `consumption`.
            The unit is kilograms.
            **Note:** `co2Emission` is only returned for `fuel` based vehicle.
          allOf:
          - "$ref": "#/components/schemas/CO2Emission"
      required:
      - duration
      - length
    VehicleTravelSummary:
      description: Total value of key attributes for a route section.
      properties:
        duration:
          "$ref": "#/components/schemas/Duration"
        length:
          "$ref": "#/components/schemas/Distance"
        consumption:
          description: |
            The estimated net energy or fuel consumption for the travel only. It is based on the `consumptionType` of the section. The value represents either net energy consumption or fuel consumption. Here are the units used for different vehicle types:
            * For electric vehicles (EVs): The energy consumption is measured in kilowatt-hours (kWh) and does not include any charging at stations.
            * For fuel-based vehicles: Depending on the fuel type, the fuel consumption is measured in liters (for diesel, petrol vehicles, and vehicles using liquefied petroleum gas (LPG)), and in kilograms (for vehicles using compressed natural gas (CNG)).
          allOf:
          - "$ref": "#/components/schemas/Consumption"
        baseDuration:
          description: |
            The duration, specified in seconds, without taking time-aware information into account.

            Dynamic traffic information is not considered. The duration is calculated using average free-flow speeds based on historical traffic, without taking into account the current traffic conditions.

            The `baseDuration` represents the best possible duration for the route section.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        typicalDuration:
          description: |
            The duration, specified in seconds, under typical traffic conditions.

            Dynamic traffic information is not considered. Instead, the duration is calculated using speeds that are typical for the given time of day/day of week, based on historical traffic data.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        mlDuration:
          description: |
            The duration, specified in seconds, based on the region-specific machine learning model.

            `mlDuration` is calculated for each route section of the route.
            If a section of the route is not supported, `mlDuration` will not be present in the summary of that section. Instead, a notice with the reason will be provided.
            `mlDuration` is only calculated for the entire section. The sum of span durations is not equivalent to `mlDuration`.
            **Limitations:**
              * Only valid for `transportMode=car` or `transportMode=taxi`.
              * Only valid for `traffic[mode]=default`.
              * Invalid for `departureTime=any`.
              * Invalid when `arrivalTime` is specified.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        tolls:
          description: |
            The summary of tolls to be paid for this section of the route, grouped according to the criteria specified in the `tolls` parameter.
            This element is included in the response if at least one grouping criteria was requested.
          allOf:
          - "$ref": "#/components/schemas/TollSummary"
        co2Emission:
          description: |
            Estimated CO2 emission for this section of the route. It is calculated based on `fuel[type]` and `consumption`.
            The unit is kilograms.
            **Note:** `co2Emission` is only returned for `fuel` based vehicle.
          allOf:
          - "$ref": "#/components/schemas/CO2Emission"
      required:
      - duration
      - length
    RoundaboutExitAction:
      allOf:
      - "$ref": "#/components/schemas/ExitAction"
    PedestrianAction:
      description: Action attached to a pedestrian section.
      oneOf:
      - "$ref": "#/components/schemas/DepartAction"
      - "$ref": "#/components/schemas/ArriveAction"
      - "$ref": "#/components/schemas/ContinueAction"
      - "$ref": "#/components/schemas/RampAction"
      - "$ref": "#/components/schemas/ExitAction"
      - "$ref": "#/components/schemas/RoundaboutPassAction"
      - "$ref": "#/components/schemas/RoundaboutEnterAction"
      - "$ref": "#/components/schemas/RoundaboutExitAction"
      - "$ref": "#/components/schemas/UTurnAction"
      - "$ref": "#/components/schemas/TurnAction"
      - "$ref": "#/components/schemas/KeepAction"
      discriminator:
        propertyName: action
        mapping:
          depart: "#/components/schemas/DepartAction"
          arrive: "#/components/schemas/ArriveAction"
          continue: "#/components/schemas/ContinueAction"
          ramp: "#/components/schemas/RampAction"
          exit: "#/components/schemas/ExitAction"
          roundaboutPass: "#/components/schemas/RoundaboutPassAction"
          roundaboutEnter: "#/components/schemas/RoundaboutEnterAction"
          roundaboutExit: "#/components/schemas/RoundaboutExitAction"
          uTurn: "#/components/schemas/UTurnAction"
          turn: "#/components/schemas/TurnAction"
          keep: "#/components/schemas/KeepAction"
    VehicleAction:
      description: Action attached to a vehicle section.
      oneOf:
      - "$ref": "#/components/schemas/DepartAction"
      - "$ref": "#/components/schemas/ArriveAction"
      - "$ref": "#/components/schemas/ContinueAction"
      - "$ref": "#/components/schemas/RampAction"
      - "$ref": "#/components/schemas/ExitAction"
      - "$ref": "#/components/schemas/RoundaboutPassAction"
      - "$ref": "#/components/schemas/RoundaboutEnterAction"
      - "$ref": "#/components/schemas/RoundaboutExitAction"
      - "$ref": "#/components/schemas/UTurnAction"
      - "$ref": "#/components/schemas/TurnAction"
      - "$ref": "#/components/schemas/KeepAction"
      discriminator:
        propertyName: action
        mapping:
          depart: "#/components/schemas/DepartAction"
          arrive: "#/components/schemas/ArriveAction"
          continue: "#/components/schemas/ContinueAction"
          ramp: "#/components/schemas/RampAction"
          exit: "#/components/schemas/ExitAction"
          roundaboutPass: "#/components/schemas/RoundaboutPassAction"
          roundaboutEnter: "#/components/schemas/RoundaboutEnterAction"
          roundaboutExit: "#/components/schemas/RoundaboutExitAction"
          uTurn: "#/components/schemas/UTurnAction"
          turn: "#/components/schemas/TurnAction"
          keep: "#/components/schemas/KeepAction"
    PedestrianSection:
      description: Represent a section of a route
      properties:
        id:
          description: Unique identifier of the section
          type: string
        type:
          description: Section type used by the client to identify what extension
            to the BaseSection are available.
          type: string
        preActions:
          description: Actions that must be done prior to `departure`.
          type: array
          items:
            "$ref": "#/components/schemas/BaseAction"
        actions:
          description: |
            Actions to be performed at or during a specific portion of a section.

            Action offsets are the coordinate index in the polyline.

            *NOTE:* currentRoad and nextRoad are not populated for actions.
          type: array
          items:
            "$ref": "#/components/schemas/PedestrianAction"
        language:
          description: Language of the localized strings in the section, if any, in
            BCP47 format.
          type: string
        postActions:
          description: Actions that must be done after `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/PedestrianPostAction"
        turnByTurnActions:
          description: Actions for turn by turn guidance during the travel portion
            of the section, i.e., between `departure` and `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/OffsetAction"
        departure:
          "$ref": "#/components/schemas/PedestrianDeparture"
        arrival:
          "$ref": "#/components/schemas/PedestrianDeparture"
        passthrough:
          description: |
            List of via waypoints this section is passing through.

            Each via waypoint of the request that is a `passThrough=true` waypoint, appears as a
            `Passthrough` in the response. It appears in the section that starts with the closest
            non-passthrough via specified before it or origin.

            The passthrough vias appear in this list in the order they are traversed. They are
            traversed in the order they are specified in the request.
          type: array
          items:
            "$ref": "#/components/schemas/Passthrough"
        summary:
          description: |
            Total value of key attributes (e.g. duration, length) summed up for the entire section, including `preActions`, `postActions`,
            and the travel portion of the section.
          allOf:
          - "$ref": "#/components/schemas/PedestrianSummary"
        travelSummary:
          description: |
            Total value of key attributes (e.g., duration, length) summed up for just the travel portion of the section,
            between `departure` and `arrival`. `preActions` and `postActions` are excluded.
          allOf:
          - "$ref": "#/components/schemas/BaseSummary"
        polyline:
          "$ref": "#/components/schemas/Polyline"
        notices:
          description: 'Contains a list of issues related to this section of the route.

'
          type: array
          items:
            "$ref": "#/components/schemas/PedestrianNotice"
        transport:
          "$ref": "#/components/schemas/PedestrianTransport"
        spans:
          description: 'Spans attached to a `Section` describing pedestrian content.

'
          type: array
          items:
            "$ref": "#/components/schemas/PedestrianSpan"
        refReplacements:
          "$ref": "#/components/schemas/RefReplacements"
      required:
      - id
      - type
      - departure
      - arrival
      - transport
    VehicleSection:
      description: Represent a section of a route
      properties:
        id:
          description: Unique identifier of the section
          type: string
        type:
          description: Section type used by the client to identify what extension
            to the BaseSection are available.
          type: string
        preActions:
          description: Actions that must be done prior to `departure`.
          type: array
          items:
            "$ref": "#/components/schemas/BaseAction"
        actions:
          description: |
            Actions to be performed at or during a specific portion of a section.

            Action offsets represent the coordinate index in the polyline.

            *NOTE:* currentRoad and nextRoad are not populated for actions.
          type: array
          items:
            "$ref": "#/components/schemas/VehicleAction"
        language:
          description: Language of the localized strings in the section, if any, in
            BCP47 format.
          type: string
        postActions:
          description: Actions that must be done after `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/VehiclePostAction"
        turnByTurnActions:
          description: |
            Turn-by-turn guidance actions.

            Action offsets represent the coordinate index in the polyline.
          type: array
          items:
            "$ref": "#/components/schemas/VehicleAction"
        departure:
          "$ref": "#/components/schemas/VehicleDeparture"
        arrival:
          "$ref": "#/components/schemas/VehicleDeparture"
        passthrough:
          description: |
            List of via waypoints this section is passing through.

            Each via waypoint of the request that is a `passThrough=true` waypoint, appears as a
            `Passthrough` in the response. It appears in the section that starts with the closest
            non-passthrough via specified before it or origin.

            The passthrough vias appear in this list in the order they are traversed. They are
            traversed in the order they are specified in the request.
          type: array
          items:
            "$ref": "#/components/schemas/Passthrough"
        summary:
          description: 'The total value of key attributes, such as duration, length,
            and consumption, summed up for the entire section, including `preActions`,
            `postActions`, and the travel portion of the section.

'
          allOf:
          - "$ref": "#/components/schemas/VehicleSummary"
        travelSummary:
          description: |
            The total value of key attributes, such as duration, length, and consumption, summed up only for the travel portion of the section,
            between `departure` and `arrival`. `preActions` and `postActions` are excluded.
          allOf:
          - "$ref": "#/components/schemas/VehicleTravelSummary"
        polyline:
          "$ref": "#/components/schemas/Polyline"
        notices:
          description: |
            Contains a list of issues related to this section of the route.

            Notices must be carefully evaluated and, if deemed necessary, the route section should be discarded accordingly.
            In particular, the user should be aware that new notice codes may be added at any time. If an unrecognized
            notice code appears with a `critical` severity level, the route section must be discarded.
            Please refer to the `code` attribute for possible values.
          type: array
          items:
            "$ref": "#/components/schemas/VehicleNotice"
        spans:
          description: 'Spans attached to a `Section` describing vehicle content.

'
          type: array
          items:
            "$ref": "#/components/schemas/VehicleSpan"
        routingZones:
          description: |
            A list of routing zones that are applicable to the section.

            Elements of this list will be referenced by indexes within the `span` attribute of the section.
          type: array
          items:
            "$ref": "#/components/schemas/RoutingZone"
        truckRoadTypes:
          description: |
            A list of truck road types that are applicable to the section.

            Elements of this list will be referenced by indexes within the `span` attribute of the section.

            A truck road type is an identifier associated with roads that have additional regulations applied by local administration for
            traversal by heavy vehicles like trucks. For example, the BK Bearing Class regulations in Sweden, and ET categories in Mexico.
            The identifiers of supported truck road types are specified at HERE Map Content
            [TruckRoadType](https://developer.here.com/documentation/here-map-content/dev_guide/topics_schema/truckroadtypeattribute.truckroadtype.html).

            These names should be provided when avoiding a certain truck road type.
          type: array
          items:
            type: string
        incidents:
          description: A list of all incidents that apply to the section.
          type: array
          items:
            "$ref": "#/components/schemas/TrafficIncident"
        refReplacements:
          "$ref": "#/components/schemas/RefReplacements"
        tollSystems:
          description: 'An array of toll authorities that collect payments for the
            use of (part of) the specified section of the route.

'
          type: array
          items:
            "$ref": "#/components/schemas/TollSystem"
        tolls:
          description: 'Detail of tolls to be paid for traversing the specified section.

'
          type: array
          items:
            "$ref": "#/components/schemas/TollCost"
        consumptionType:
          description: Vehicle energy or fuel consumption type.
          allOf:
          - "$ref": "#/components/schemas/ConsumptionType"
        transport:
          "$ref": "#/components/schemas/VehicleTransport"
      required:
      - id
      - type
      - departure
      - arrival
      - transport
    RouterSection:
      description: |
        One of the possible sections that can be part of the Router route.

        `TransitSection` is only used for ferries and car shuttles.
      oneOf:
      - "$ref": "#/components/schemas/VehicleSection"
      - "$ref": "#/components/schemas/PedestrianSection"
      - "$ref": "#/components/schemas/TransitSection"
      discriminator:
        propertyName: type
        mapping:
          vehicle: "#/components/schemas/VehicleSection"
          pedestrian: "#/components/schemas/PedestrianSection"
          transit: "#/components/schemas/TransitSection"
    RouterRoute:
      description: 'A basic route. Includes personal vehicles as car, truck, etc...
        For all modes, cf. `transportMode`.

'
      properties:
        id:
          description: Unique identifier of the route
          type: string
        notices:
          description: Contains a list of issues encountered during the processing
            of this response.
          type: array
          items:
            "$ref": "#/components/schemas/Notice"
        sections:
          type: array
          items:
            "$ref": "#/components/schemas/RouterSection"
          description: 'An ordered list of vehicle, transit, and pedestrian sections
            making up the route.

'
        routeLabels:
          description: |
            Contains a list of the most important names and route numbers on this route that differentiate it from other alternatives.
            These names are used to make labels for the main and alternative routes, like "route1 via A4,D10", "route2 via D11,5"
            The generated list is expected to be unique for each route in response (but it's not guaranteed)
          type: array
          items:
            "$ref": "#/components/schemas/RouteLabel"
          minItems: 0
          maxItems: 2
        routeHandle:
          description: |
            Opaque handle of the calculated route.

            A handle encodes the calculated route. The route can be decoded from a handle at a
            later point in time as long as the service uses the same map data which was used
            during encoding.

            To request a handle set the `routeHandle` flag in `return` parameter. If a handle is
            requested, but fails to be calculated for any reason, then the `routeHandle` property is
            not available in the response. The rest of the route is intact.
          type: string
      required:
      - id
      - sections
    RouterRouteResponse:
      description: Returns a list of routes.
      properties:
        notices:
          description: |
            Contains a list of issues related to this route calculation.
            Please refer to the `code` attribute for possible values.
          type: array
          items:
            "$ref": "#/components/schemas/RouteResponseNotice"
        routes:
          description: List of possible routes
          type: array
          items:
            "$ref": "#/components/schemas/RouterRoute"
      required:
      - routes
  responses:
    401ErrorResponseWithRequestID:
      description: API response in case of unauthorized access.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/AuthErrorResponseSchema"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/401errorResponseExample"
    500ErrorResponseWithRequestID:
      description: API response in case of internal server error.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/500errorResponseExample"
    502ErrorResponseWithRequestID:
      description: API response in case of bad gateway.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/502errorResponseExample"
    503ErrorResponseWithRequestID:
      description: API response in case of service unavailable.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/503errorResponseExample"
    504ErrorResponseWithRequestID:
      description: API response in case of gateway timeout.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/504errorResponseExample"
    HealthResponseFailWithRequestID:
      description: API response in case of failure.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/HealthResponseFailSchema"
        text/plain:
          schema:
            type: string
    HealthResponseOkWithRequestID:
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      description: API response in case of success.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/HealthResponseOKSchema"
    InternalServerErrorRoutesResponse:
      description: Internal server error
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/RoutingErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/500RoutingErrorResponseExample"
    InvalidRoutesRequestResponse:
      description: |
        Failure to parse the request, caused by, for example, invalid parameter values such as
        `transportMode=spaceShuttle` or `alternatives=999`.

        Note that route calculation errors aren't considered failures. Cf. `RouterRouteResponse`
        for details on route calculation errors.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/RoutingErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/400RoutingErrorResponseExample"
    OpenApiResponseOk:
      description: API specification in OpenAPI 3 format
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      content:
        application/x-yaml:
          schema:
            type: string
        text/x-yaml:
          schema:
            type: string
    RoutesResponseOk:
      description: Routes API response in case of success
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/RouterRouteResponse"
          examples:
            routeResponseExample:
              "$ref": "#/components/examples/routeResponseExample"
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
    Routing403ErrorResponse:
      description: |
        Not allowed, such as trying to calculate routes in Japan without having necessary
        permissions.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Routing403ErrorResponseSchema"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/403RoutingErrorResponseExample"
    VersionResponseOkWithRequestID:
      description: API response in case of success.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/VersionResponse"
          examples:
            versionResponseOkExample:
              "$ref": "#/components/examples/VersionResponseOkExample"
  examples:
    400RoutingErrorResponseExample:
      value:
        title: Malformed request
        status: 400
        code: E605001
        cause: missing field `destination`
        action: ''
        correlationId: 4199533b-6290-41db-8d79-edf4f4019a74
    401errorResponseExample:
      value:
        error: Unauthorized
        error_description: No credentials found
    403RoutingErrorResponseExample:
      value:
        title: Not allowed
        status: 403
        code: E605101
        cause: Your credentials are not allowed to calculate routes in Japan
        action: Obtain credentials that allow you to calculate routes in Japan
        correlationId: 4199533b-6290-41db-8d79-edf4f4019a74
    500RoutingErrorResponseExample:
      value:
        title: Internal server error
        status: 500
        code: E605500
        cause: ''
        action: ''
        correlationId: 4199533b-6290-41db-8d79-edf4f4019a74
    500errorResponseExample:
      value:
        title: 'failed with reason: internal server error'
        status: 500
        code: E600103
        cause: Internal Server Error
        action: ''
        correlationId: ''
    502errorResponseExample:
      value:
        title: 'failed with reason: bad gateway'
        status: 502
        code: E600002
        cause: Bad Gateway
        action: ''
        correlationId: ''
    503errorResponseExample:
      value:
        title: 'failed with reason: service unavailable'
        status: 503
        code: E600001
        cause: Service Unavailable
        action: ''
        correlationId: ''
    504errorResponseExample:
      value:
        title: 'failed with reason: gateway timeout'
        status: 504
        code: E600000
        cause: Gateway Timeout
        action: ''
        correlationId: ''
    ReroutingExample:
      value:
        mode: returnToRoute
        lastTraveledSectionIndex: 0
        traveledDistanceOnLastSection: 142
    VersionResponseOkExample:
      value:
      - apiVersion: 8.18.0
      - serviceVersion: 2022-12-15-b706cc8c-9057409
      - dataVersions:
        - name: traffic-feed
          version: '2023-01-31T14:41:36+00:00'
        - name: hrn:here:data::olp-here:rib-2
          version: '4898'
        - name: hrn:here:data::olp-here:here-map-content-japan-2
          version: '65'
        - name: optimized-map-for-routing
          version: 2022.346.5.48
    calculateRoutesPostParametersExample:
      value:
        avoid:
          segments:
          - here:cm:segment:99994525
          areas:
          - polygon:52.416,13.082;52.626,13.628;52.916,13.482
          - polygon:BG8mnlkD6-9wZAmrR19DAAlrR
          - bbox:13.082,52.416,13.628,52.626
        ev:
          preferredBrands:
          - 6e1a148e8ddf06f613599134197b7c1c
          - 6211c90a063d36429b599dda79ae85e3
    matchTraceExample:
      value:
        trace:
        - lat: 52.0
          lng: 13.1
        - lat: 52.1
          lng: 13.2
        - lat: 52.2
          lng: 13.3
        via:
        - index: 1
    noticeWithRestrictionsExample:
      description: |
        Example of a notice indicating violation of a restriction that applies to vehicles
        over 12 tons and having between 2 and 4 axles (inclusive).
      value:
        title: Violated vehicle restriction.
        code: violatedVehicleRestriction
        severity: critical
        details:
        - cause: Route violates vehicle restriction
          type: restriction
          maxGrossWeight: 12000
          axleCount:
            from: 2
            to: 4
    restrictionExample:
      description: |
        Example modeling the following set of conditions that apply to one section of a road:
        * 12t weight
        * 3m height
        * forbidden transportation of gas
      value:
        type: restriction
        maxGrossWeight: 12000
        maxHeight: 300
        forbiddenHazardousGoods:
        - gas
    routeResponseExample:
      value:
        routes:
        - id: 1793a897-0843-4957-ab63-c61e0f13aff2
          sections:
          - id: c3e300ab-a880-4fab-9bb2-702355b2bf6b
            type: vehicle
            actions:
            - action: depart
              duration: 126
              instruction: Head toward ChausseestraÃe on InvalidenstraÃe. Go for 1.2
                km.
              offset: 0
            - action: arrive
              duration: 0
              instruction: Arrive at InvalidenstraÃe.
              offset: 78
            departure:
              time: '2019-12-05T15:15:56+01:00'
              place:
                type: place
                location:
                  lat: 52.53100287169218
                  lng: 13.38464098982513
            arrival:
              time: '2019-12-05T15:18:02+01:00'
              place:
                type: place
                location:
                  lat: 52.52639072947204
                  lng: 13.368653766810894
            summary:
              duration: 126
              length: 1200
            polyline: BG2znmkDi89wZ9ChKAA1IvfAArH5cAArHvbAA1CrJAArF5SAAtP9yBAAT1E3E3QAA_BrH3M9sBAA_F5SAA3KlkBAA1EtNAApB_DAAhC1EAApB1I_D5OAA3ErPAApFtTAAtN_wBAA1GtVAA5U3lCAA_DhOAA3KliBAAtXjvCAArDtLAA1EhQAA1CrJAA_BrFAAvbl9CAAhIvZ_FtTrDtLAAV1I1CtNAA1E3QAArLnoB1G5YAAhGhSpBrFAAhC1GAA1FxT
            spans:
            - offset: 0
              names:
              - value: InvalidenstraÃe
                language: de
              length: 787
            - offset: 49
              names:
              - value: InvalidenstraÃe
                language: de
              - value: SandkrugbrÃ¼cke
                language: de
              length: 51
            - offset: 57
              names:
              - value: InvalidenstraÃe
                language: de
              length: 362
            transport:
              mode: car
    routeResponseManeuverSignpostInfoExample:
      value:
        labels:
        - name:
            value: San Jose
            language: en
          routeNumber:
            value: US-101
            language: en
            direction: south
        - name:
            value: San Francisco
            language: en
          routeNumber:
            value: US-101
            language: en
            direction: north
        - routeNumber:
            value: I-280
            language: en
    routeResponseNoticeExample:
      value:
        title: 'Route calculation failed: Couldn''t match origin.'
        code: couldNotMatchOrigin
        severity: critical
